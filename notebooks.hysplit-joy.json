{"version":2,"kind":"Notebook","sha256":"2aa0db9fd6a1d144e5df40b37f1f806d4c7046349a147e404e0ac3f26421082e","slug":"notebooks.hysplit-joy","location":"/notebooks/HYSPLIT_Joy.ipynb","dependencies":[],"frontmatter":{"title":"Source determination through NOAA HYSPLIT trajectory model","content_includes_title":true,"kernelspec":{"name":"conda-base-py","display_name":"Python [conda env:base] *","language":"python"},"authors":[{"nameParsed":{"literal":"Project Pythia Community","given":"Project Pythia","family":"Community"},"name":"Project Pythia Community","url":"https://projectpythia.org/","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true},"code":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/projectpythia/armss2024-sail-cookbook","copyright":"2024","numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/armss2024-sail-cookbook/blob/main/notebooks/HYSPLIT_Joy.ipynb","thumbnail":"/armss2024-sail-cookbook/build/a90120b07a20b93871b2ec642f4280d7.png","exports":[{"format":"ipynb","filename":"HYSPLIT_Joy.ipynb","url":"/armss2024-sail-cookbook/build/HYSPLIT_Joy-5ff69f00c486728f4d749fc055c25e61.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{"scrolled":true},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Source determination through NOAA HYSPLIT trajectory model","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OvZlvOg7gW"}],"identifier":"source-determination-through-noaa-hysplit-trajectory-model","label":"Source determination through NOAA HYSPLIT trajectory model","html_id":"source-determination-through-noaa-hysplit-trajectory-model","implicit":true,"key":"l6LPVNaf5N"}],"key":"ludXBkaaoC"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/armss2024-sail-cookbook/build/a90120b07a20b93871b2ec642f4280d7.png","alt":"NOAA logo","key":"a3GF3ZHPyC","urlSource":"https://www.ready.noaa.gov/images/ready/hysplit_logo_rec_165px.png"},{"type":"text","value":"       ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"p5weTT1xqV"},{"type":"image","url":"/armss2024-sail-cookbook/build/d04f36ad8e157a2a5b819a2697ab78b9.png","alt":"NASA logo","key":"YtWbCrlSVo","urlSource":"https://firms.modaps.eosdis.nasa.gov/images/touch/icon-192x192.png"}],"key":"X9LylrIR4E"}],"key":"Z2jUDUHOng"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"HYSPLIT models simulate the dispersion and trajectory of substances transported and dispersed through our atmosphere, over local to global scales.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZVcHysbZD7"}],"key":"wyUv4UxOI7"}],"identifier":"hysplit-models-simulate-the-dispersion-and-trajectory-of-substances-transported-and-dispersed-through-our-atmosphere-over-local-to-global-scales","label":"HYSPLIT models simulate the dispersion and trajectory of substances transported and dispersed through our atmosphere, over local to global scales.","html_id":"hysplit-models-simulate-the-dispersion-and-trajectory-of-substances-transported-and-dispersed-through-our-atmosphere-over-local-to-global-scales","implicit":true,"key":"hth5aIzKbp"},{"type":"heading","depth":3,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"A common application is a back trajectory analysis to determine the origin of air masses and establish source-receptor relationships.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Iyjm7RUQUi"}],"key":"Ck4dQ35ts3"}],"identifier":"a-common-application-is-a-back-trajectory-analysis-to-determine-the-origin-of-air-masses-and-establish-source-receptor-relationships","label":"A common application is a back trajectory analysis to determine the origin of air masses and establish source-receptor relationships.","html_id":"a-common-application-is-a-back-trajectory-analysis-to-determine-the-origin-of-air-masses-and-establish-source-receptor-relationships","implicit":true,"key":"uoNGg3YVvZ"}],"key":"ha4ZoEzYtO"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# import libraries\nimport xarray as xr   # for data storage and processing\nimport numpy as np    # for data storage and processig\nimport pandas as pd   # for data storage and processig\nimport act\nfrom datetime import datetime  # for formating date and time\nimport matplotlib.pyplot as plt","key":"nyvKwtHOaj"},{"type":"output","id":"bqponJepu4u5EJdtuWl_q","data":[],"key":"EYY3LKRIM0"}],"key":"CYVRZPDgYQ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# define the function to read the HYSPLIT model output file\ndef read_hysplit(filename, base_year=2000):\n    \"\"\"\n    Reads an input HYSPLIT trajectory for plotting in ACT.\n    Parameters\n    ----------\n    filename: str\n        The input file name.\n    base_year: int\n        The first year of the century in which the data are contained.\n    Returns\n    -------\n    ds: xarray Dataset\n        The ACT dataset containing the HYSPLIT trajectories\n    \"\"\"\n    ds = xr.Dataset({})\n    num_lines = 0\n    with open(filename) as filebuf:\n        num_grids = int(filebuf.readline().split()[0])\n        num_lines += 1\n        grid_times = []\n        grid_names = []\n        forecast_hours = np.zeros(num_grids)\n        for i in range(num_grids):\n            data = filebuf.readline().split()\n            num_lines += 1\n            grid_names.append(data[0])\n            grid_times.append(\n                datetime(\n                    year=(int(data[1]) + base_year),\n                    month=int(data[2]),\n                    day=int(data[3]),\n                    hour=int(data[4]),\n                )\n            )\n            forecast_hours[i] = int(data[5])\n        ds[\"grid_forecast_hour\"] = xr.DataArray(forecast_hours, dims=[\"num_grids\"])\n        ds[\"grid_forecast_hour\"].attrs[\"standard_name\"] = \"Grid forecast hour\"\n        ds[\"grid_forecast_hour\"].attrs[\"units\"] = \"Hour [UTC]\"\n        ds[\"grid_times\"] = xr.DataArray(np.array(grid_times), dims=[\"num_grids\"])\n        data_line = filebuf.readline().split()\n        num_lines += 1\n        ds.attrs[\"trajectory_direction\"] = data_line[1]\n        ds.attrs[\"vertical_motion_calculation_method\"] = data_line[2]\n        num_traj = int(data_line[0])\n        traj_times = []\n        start_lats = np.zeros(num_traj)\n        start_lons = np.zeros(num_traj)\n        start_alt = np.zeros(num_traj)\n        for i in range(num_traj):\n            data = filebuf.readline().split()\n            num_lines += 1\n            traj_times.append(\n                datetime(\n                    year=(base_year + int(data[0])),\n                    month=int(data[1]),\n                    day=int(data[2]),\n                    hour=int(data[3]),\n                )\n            )\n            start_lats[i] = float(data[4])\n            start_lons[i] = float(data[5])\n            start_alt[i] = float(data[6])\n        ds[\"start_latitude\"] = xr.DataArray(start_lats, dims=[\"num_trajectories\"])\n        ds[\"start_latitude\"].attrs[\"long_name\"] = \"Trajectory start latitude\"\n        ds[\"start_latitude\"].attrs[\"units\"] = \"degree\"\n        ds[\"start_longitude\"] = xr.DataArray(start_lats, dims=[\"num_trajectories\"])\n        ds[\"start_longitude\"].attrs[\"long_name\"] = \"Trajectory start longitude\"\n        ds[\"start_longitude\"].attrs[\"units\"] = \"degree\"\n        ds[\"start_altitude\"] = xr.DataArray(start_alt, dims=[\"num_trajectories\"])\n        ds[\"start_altitude\"].attrs[\"long_name\"] = \"Trajectory start altitude\"\n        ds[\"start_altitude\"].attrs[\"units\"] = \"degree\"\n        data = filebuf.readline().split()\n        num_lines += 1\n        var_list = [\n            \"trajectory_number\",\n            \"grid_number\",\n            \"year\",\n            \"month\",\n            \"day\",\n            \"hour\",\n            \"minute\",\n            \"forecast_hour\",\n            \"age\",\n            \"lat\",\n            \"lon\",\n            \"alt\",\n        ]\n        for variable in data[1:]:\n            var_list.append(variable)\n        input_df = pd.read_csv(\n            filebuf, sep=r'\\s+', index_col=False, names=var_list, skiprows=1\n        )  # noqa W605\n        input_df['year'] = base_year + input_df['year']\n        input_df['year'] = input_df['year'].astype(int)\n        input_df['month'] = input_df['month'].astype(int)\n        input_df['day'] = input_df['day'].astype(int)\n        input_df['hour'] = input_df['hour'].astype(int)\n        input_df['minute'] = input_df['minute'].astype(int)\n        input_df['time'] = pd.to_datetime(\n            input_df[[\"year\", \"month\", \"day\", \"hour\", \"minute\"]], format='%y%m%d%H%M'\n        )\n        input_df = input_df.set_index(\"time\")\n        del input_df[\"year\"]\n        del input_df[\"month\"]\n        del input_df[\"day\"]\n        del input_df[\"hour\"]\n        del input_df[\"minute\"]\n        ds = ds.merge(input_df.to_xarray())\n        ds.attrs['datastream'] = 'hysplit'\n        ds[\"trajectory_number\"].attrs[\"standard_name\"] = \"Trajectory number\"\n        ds[\"trajectory_number\"].attrs[\"units\"] = \"1\"\n        ds[\"grid_number\"].attrs[\"standard_name\"] = \"Grid number\"\n        ds[\"grid_number\"].attrs[\"units\"] = \"1\"\n        ds[\"age\"].attrs[\"standard_name\"] = \"Grid number\"\n        ds[\"age\"].attrs[\"units\"] = \"1\"\n        ds[\"lat\"].attrs[\"standard_name\"] = \"Latitude\"\n        ds[\"lat\"].attrs[\"units\"] = \"degree\"\n        ds[\"lon\"].attrs[\"standard_name\"] = \"Longitude\"\n        ds[\"lon\"].attrs[\"units\"] = \"degree\"\n        ds[\"alt\"].attrs[\"standard_name\"] = \"Altitude\"\n        ds[\"alt\"].attrs[\"units\"] = \"meter\"\n    return ds","key":"iVbjiaOydz"},{"type":"output","id":"njnEWRYvz8W1kX3dKLXbY","data":[],"key":"JdA9YWVUoG"}],"key":"hhZquGnFAI"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plotting HYSPLIT back trajectory and compare with NASA firemap","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LBkYmWTXGZ"}],"identifier":"plotting-hysplit-back-trajectory-and-compare-with-nasa-firemap","label":"Plotting HYSPLIT back trajectory and compare with NASA firemap","html_id":"plotting-hysplit-back-trajectory-and-compare-with-nasa-firemap","implicit":true,"key":"p03tatkjLz"}],"key":"tGbc5Si53h"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Case 1: Jan 8th, 2022","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YDPlZlrU8Z"}],"identifier":"case-1-jan-8th-2022","label":"Case 1: Jan 8th, 2022","html_id":"case-1-jan-8th-2022","implicit":true,"key":"zoabGWH9FR"}],"key":"kYqr9sfigR"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Load the data\nfilename = 'guc_010822.txt'\nds = read_hysplit(filename)\n\n# Use the GeographicPlotDisplay object to make the plot\ndisp = act.plotting.GeographicPlotDisplay(ds)\nax = disp.geoplot('PRESSURE', cartopy_feature=['STATES', 'OCEAN', 'LAND'], s = 1)\nax.set_xlim([-159, -67])\nax.set_ylim([20, 77])\nplt.show()","key":"cic5rQDqMO"},{"type":"output","id":"0UerFzOHAWe71oDbhCWyn","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"ec8553a2bdcd494083d09c9ffe6c1bc7","path":"/armss2024-sail-cookbook/build/ec8553a2bdcd494083d09c9ffe6c1bc7.png"},"text/plain":{"content":"<Figure size 640x480 with 2 Axes>","content_type":"text/plain"}}}],"key":"W2HkHyI3N8"}],"key":"D7eVmqGQTc"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/armss2024-sail-cookbook/build/firemap_010822-931e42e9f04648c371a9832dd58b0bc1.png","alt":"Project Pythia Logo","key":"Zmxz6nd5j2","urlSource":"images/firemap_010822.png"}],"key":"nDmYWRxtW6"}],"key":"BjGLpC6K0z"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Fire Map Link","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fiwTyhN8y9"}],"identifier":"fire-map-link","label":"Fire Map Link","html_id":"fire-map-link","implicit":true,"key":"CSQVIhhAuW"},{"type":"image","url":"/armss2024-sail-cookbook/build/d04f36ad8e157a2a5b819a2697ab78b9.png","alt":"NASA FIRMS Fire Map","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"s0ctRu8an6","urlSource":"https://firms.modaps.eosdis.nasa.gov/images/touch/icon-192x192.png"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://firms.modaps.eosdis.nasa.gov/map/#d:24hrs;@30.0,-2.5,3.5z","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Click here to view the interactive map","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"NcspBc1OwG"}],"urlSource":"https://firms.modaps.eosdis.nasa.gov/map/#d:24hrs;@30.0,-2.5,3.5z","key":"sto8yOBXBK"}],"key":"au3YdPyccW"}],"key":"gCczGtyHHA"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Case 2: Jan 25th, 2022","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BUrpnp3gms"}],"identifier":"case-2-jan-25th-2022","label":"Case 2: Jan 25th, 2022","html_id":"case-2-jan-25th-2022","implicit":true,"key":"oYS3vryfG4"}],"key":"YkNXIwnt3L"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Load the data\nfilename = 'guc_012522.txt'\nds = read_hysplit(filename)\n\n# Use the GeographicPlotDisplay object to make the plot\ndisp = act.plotting.GeographicPlotDisplay(ds)\nax = disp.geoplot('PRESSURE', cartopy_feature=['STATES', 'OCEAN', 'LAND'], s = 1)\nax.set_xlim([-159, -67])\nax.set_ylim([20, 77])\nplt.show()","key":"VeUvl6PMZT"},{"type":"output","id":"E1Vh0fn-JGIROPqgE6LuK","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"5238a30ef2d600d9aa37d0d1525586cf","path":"/armss2024-sail-cookbook/build/5238a30ef2d600d9aa37d0d1525586cf.png"},"text/plain":{"content":"<Figure size 640x480 with 2 Axes>","content_type":"text/plain"}}}],"key":"NpeIaP07Dw"}],"key":"MqcjcTTY7u"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/armss2024-sail-cookbook/build/firemap_012522-67f2095c5ca00187551d1d685090b2da.png","alt":"Project Pythia Logo","key":"VJ2IzrVW1o","urlSource":"images/firemap_012522.png"}],"key":"mhy0paDIXQ"}],"key":"mu9iEGvzN8"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Case 3: Apr 3rd, 2023","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qJElFlkhNa"}],"identifier":"case-3-apr-3rd-2023","label":"Case 3: Apr 3rd, 2023","html_id":"case-3-apr-3rd-2023","implicit":true,"key":"pIusRtvvxE"}],"key":"wZQK6xEYyQ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Load the data\nfilename = 'guc_040323.txt'\nds = read_hysplit(filename)\n\n# Use the GeographicPlotDisplay object to make the plot\ndisp = act.plotting.GeographicPlotDisplay(ds)\nax = disp.geoplot('PRESSURE', cartopy_feature=['STATES', 'OCEAN', 'LAND'], s = 1)\nax.set_xlim([-159, -67])\nax.set_ylim([20, 77])\nplt.show()","key":"K9RMFfNnmc"},{"type":"output","id":"jMOmO_tg02DSp6DYnJHLg","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"6f72411fee24079b7cafeb6a1da3494b","path":"/armss2024-sail-cookbook/build/6f72411fee24079b7cafeb6a1da3494b.png"},"text/plain":{"content":"<Figure size 640x480 with 2 Axes>","content_type":"text/plain"}}}],"key":"v5pknAbPqc"}],"key":"ohsTt3DbYV"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/armss2024-sail-cookbook/build/firemap_040323-c54a7bbc33c1e0b41b170dced8616062.png","alt":"NASA firemap 040323","key":"FnlXU0Kf58","urlSource":"images/firemap_040323.png"}],"key":"qHxwWB6y9I"}],"key":"zZiq6G2x8Y"},{"type":"block","kind":"notebook-content","children":[{"type":"iframe","src":"data/home/jlai/sail-cookbook/notebooks/ARM_smps_data.html","width":"100%","key":"ewTQQ7ZKN9"}],"key":"ailJKdnp1O"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from IPython.display import display, HTML\n\n# Adjust the path to your HTML file accordingly\nfile_path = \"ARM_smps_data.html\"\n\n# Read the content of the HTML file\nwith open(file_path, 'r') as file:\n    html_content = file.read()\n\n# Display the HTML content\ndisplay(HTML(html_content))\n","key":"B57arEu855"},{"type":"output","id":"BxdsM7dDRVKoMzIQ8qSz0","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content_type":"text/html","hash":"1ca962506d6434b5bfa6c038fdee2968","path":"/armss2024-sail-cookbook/build/1ca962506d6434b5bfa6c038fdee2968.html"},"text/plain":{"content":"<IPython.core.display.HTML object>","content_type":"text/plain"}}}],"key":"ACe03nbwWv"}],"key":"yibIunwpaN"}],"key":"Utpxk5Kytr"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Armss2024-sail Cookbook","url":"/","group":"Armss2024-sail Cookbook"},"next":{"title":"Dust layer observations","url":"/notebooks/dust-analysis-with-lidar","group":"Identify high-aerosol loading events"}}},"domain":"http://localhost:3000"}