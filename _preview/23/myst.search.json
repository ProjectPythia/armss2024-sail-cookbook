{"version":"1","records":[{"hierarchy":{"lvl1":"Total particle counts from OPC"},"type":"lvl1","url":"/opc","position":0},{"hierarchy":{"lvl1":"Total particle counts from OPC"},"content":"","type":"content","url":"/opc","position":1},{"hierarchy":{"lvl1":"Total particle counts from OPC"},"type":"lvl1","url":"/opc#total-particle-counts-from-opc","position":2},{"hierarchy":{"lvl1":"Total particle counts from OPC"},"content":"\n\nimport act\nimport numpy as np\nimport xarray as xr\nimport matplotlib.pyplot as plt\n\nusername = 'rppoland18'\ntoken = '3127641b73e77c24'\ndatastream = 'gucaosopcS2.b1'\nstartdate = '2021-10-27'\nenddate = '2023-06-16'\n\nresult = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\n\nopc = act.io.read_arm_netcdf(result)\nlist(opc)\n\n# OPC counts for days of interest\nwf_N = opc.total_N_conc.sel(time=slice('2022-01-25T00:00:00.000000000','2022-01-29T00:00:00.000000000')).mean(dim='time').values\ndust_N = opc.total_N_conc.sel(time=slice('2023-04-04T00:00:00.000000000','2023-04-06T00:00:00.000000000')).mean(dim='time').values\nbkg_N = opc.total_N_conc.sel(time=slice('2022-01-03T00:00:00.000000000','2022-01-07T00:00:00.000000000')).mean(dim='time').values \n\n# Now compare the total concentrations across these events\nx = ['background','wildfire','dust']\ny = [bkg_N,wf_N,dust_N]\nbar_colors = ['black', 'red', 'orange']\nfig,ax = plt.subplots()\nax.bar(x, y,color=bar_colors)\nplt.ylabel('Particle Count cm^-3')\nplt.title('Total concentration 0-33 um (OPC)')","type":"content","url":"/opc#total-particle-counts-from-opc","position":3},{"hierarchy":{"lvl1":"SAIL Cookbook: Aerosol influence on ground snow properties during SAIL"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"SAIL Cookbook: Aerosol influence on ground snow properties during SAIL"},"content":"","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"SAIL Cookbook: Aerosol influence on ground snow properties during SAIL"},"type":"lvl1","url":"/#sail-cookbook-aerosol-influence-on-ground-snow-properties-during-sail","position":2},{"hierarchy":{"lvl1":"SAIL Cookbook: Aerosol influence on ground snow properties during SAIL"},"content":"","type":"content","url":"/#sail-cookbook-aerosol-influence-on-ground-snow-properties-during-sail","position":3},{"hierarchy":{"lvl1":"SAIL Cookbook: Aerosol influence on ground snow properties during SAIL","lvl2":"Group Members"},"type":"lvl2","url":"/#group-members","position":4},{"hierarchy":{"lvl1":"SAIL Cookbook: Aerosol influence on ground snow properties during SAIL","lvl2":"Group Members"},"content":"Yan Xie, Zhenli Lai (Joy), Maiqi Zhang, Jessica Gasparik, Hayden Webb, Ryan Poland, Adrian Cortes\n\n\n\n\n\n\n\n\n\nThe Colorado River provides water resources to the local community and ecosystems, 15 million jobs, and hydroelectric energy. However, the Colorado River has been under extreme stress with decreases in stream and river discharge in the basin. Many studies investigate reasons behind the changing in river conditions. On September 1, 2021 an ARM field campaign known as Surface Atmosphere Integrated Field Laboratory (SAIL) was launched to advance knowledge of atmospheric processes at high altitude terrain. The field campaign extended through June 15, 2023 with the ARM Mobile Facility (AMF2) deployed to Gunnison, CO. Measurements in precipitation, atmospheric thermodynamic state, aerosols and many more were collected over the period of study.\n\nOur analysis utilizes SAIL data to observe changes in snow properties due to high aerosol loading events. The analysis considers a high black carbon event on January 25th, 2022 caused by wildfire smoke advecting over the Colorado site from California. The second event considers a known high dust loading event on April 3rd, 2023. These events are validated using HYSPLIT simulations. We analyze the aerosol present using data from the ARM2 including SMPS, SP2, OPC, Lidar. This project evaluates changes in albedo, longwave radiation, and snowpack due to high aerosol loading events. The events are compared to WRF simulations for the SAIL campaign, which do not include aerosol. This serves to validate our findings regarding aerosol influence on the surface snow properties. This work is motivated by understanding the aerosol influence on the local hydrologic cycle.","type":"content","url":"/#group-members","position":5},{"hierarchy":{"lvl1":"SAIL Cookbook: Aerosol influence on ground snow properties during SAIL","lvl2":"Science Question(s)"},"type":"lvl2","url":"/#science-question-s","position":6},{"hierarchy":{"lvl1":"SAIL Cookbook: Aerosol influence on ground snow properties during SAIL","lvl2":"Science Question(s)"},"content":"Compare snowpack and surface radiative properties for two aerosol events (high dust and high black carbon (BC)) and one control case.\n\nDates under consideration: January 2nd 2022 (control), January 25th 2022 (black carbon event), April 3rd 2023 (dust event). We will consider 5 days after each event.\n\nHow do these peaks correlate with changes surface albedo, radiative fluxes & snowpack?\n\nQuantify errors in WRF simulations which do not consider aerosol. Observe differences in surface albedo, radiative fluxes and snowpack depth.\n\nMotivation: Observe the impact of high aerosol loading on the local hydrologic cycle.","type":"content","url":"/#science-question-s","position":7},{"hierarchy":{"lvl1":"SAIL Cookbook: Aerosol influence on ground snow properties during SAIL","lvl2":"Project Scope (what does success look like)?"},"type":"lvl2","url":"/#project-scope-what-does-success-look-like","position":8},{"hierarchy":{"lvl1":"SAIL Cookbook: Aerosol influence on ground snow properties during SAIL","lvl2":"Project Scope (what does success look like)?"},"content":"Aerosol (observations): plot total number concentration, plot black carbon and dust mixing ratios (or proxy variable)\n\nSurface snow impact (observations): Plot changes in snowpack, surface albedo, and radiative fluxes surrounding high aerosol events\n\nModel comparison: WRF simulations at the same dates, quantify errors in snowpack, surface albedo, and radiative fluxes. Errors = observed - modeled.","type":"content","url":"/#project-scope-what-does-success-look-like","position":9},{"hierarchy":{"lvl1":"SAIL Cookbook: Aerosol influence on ground snow properties during SAIL","lvl2":"Hypothesis (or Hypotheses)"},"type":"lvl2","url":"/#hypothesis-or-hypotheses","position":10},{"hierarchy":{"lvl1":"SAIL Cookbook: Aerosol influence on ground snow properties during SAIL","lvl2":"Hypothesis (or Hypotheses)"},"content":"Decreases in local surface albedo will correlate with high aerosol loading events.\n\nIncreased surface heating results in snowpack depth decrease following high aerosol loading events.\n\nWRF does not implement aerosols in simulations; therefore, could mis predict the snow radiation fluxes following aerosol events.","type":"content","url":"/#hypothesis-or-hypotheses","position":11},{"hierarchy":{"lvl1":"SAIL Cookbook: Aerosol influence on ground snow properties during SAIL","lvl2":"Datasets"},"type":"lvl2","url":"/#datasets","position":12},{"hierarchy":{"lvl1":"SAIL Cookbook: Aerosol influence on ground snow properties during SAIL","lvl2":"Datasets"},"content":"SP2 measurement - black carbon\n\nLidar - dust\n\nSMPS - total number concentration&size distribution\n\nHYSPLIT-back trajectories\n\nSEBS measurement - surface shortwave radiation fluxes\n\nMET measurement - surface temperature; precipitation\n\nWRF simulation - surface radiation fluxes; snow depth (?); surface temperature\n\nAOP PSAP - aerosol optical properties (AAE, AE, SSA, Beta Abs, Beta Sca)\n\nWeather camera - snow cover status","type":"content","url":"/#datasets","position":13},{"hierarchy":{"lvl1":"SAIL Cookbook: Aerosol influence on ground snow properties during SAIL","lvl2":"Summary"},"type":"lvl2","url":"/#summary","position":14},{"hierarchy":{"lvl1":"SAIL Cookbook: Aerosol influence on ground snow properties during SAIL","lvl2":"Summary"},"content":"We utilize the SAIL campaign measurements to perform a case study on three events including one control event and two high-aerosol loading events. In-situ measurements and back-trajectory model output are used to evaluate the number concentration and size distribution of aerosols and black carbon. Analysis of longwave radiation measurements further confirms that there are high concentration of black carbon/aerosols in the atmosphere. Snow albedo decreases have been observed in the two high-aerosol loading events. Meanwhile, WRF simulations do not capture such decreases in surface albedo. Since WRF simulations used in this project do not incorporate aerosols, we expect aerosols, along with other factors, can contribute to such discrepancy between measurements and WRF simulations in terms of the snow darkening effect of aerosols/black carbon.","type":"content","url":"/#summary","position":15},{"hierarchy":{"lvl1":"Longwave IR Radiation Ratios"},"type":"lvl1","url":"/radiometer","position":0},{"hierarchy":{"lvl1":"Longwave IR Radiation Ratios"},"content":"","type":"content","url":"/radiometer","position":1},{"hierarchy":{"lvl1":"Longwave IR Radiation Ratios"},"type":"lvl1","url":"/radiometer#longwave-ir-radiation-ratios","position":2},{"hierarchy":{"lvl1":"Longwave IR Radiation Ratios"},"content":"\n\nimport act\nimport numpy as np\nimport xarray as xr\nimport matplotlib.pyplot as plt\n\nusername = 'rppoland18'\ntoken = '3127641b73e77c24'\ndatastream = 'gucqcrad1longM1.c2'\nstartdate = '2021-09-01'\nenddate = '2023-06-15'\n\nresult = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\nrad = act.io.read_arm_netcdf(result)\nrad\n\nwf_rad = rad.sel(time=slice('2022-01-26T06:30:00','2022-01-27T00:00:00'))\nbkg_rad = rad.sel(time=slice('2022-01-03T00:00:00','2022-01-04T00:00:00'))\ndust_rad = rad.sel(time=slice('2023-04-06T00:00:00','2023-04-07T00:00:00'))\n# dust_rad.down_long_hemisp.plot()\n# dust_rad.up_long_hemisp.plot()\nfig,(ax1,ax2) = plt.subplots(1,2,figsize=[20,8],layout='constrained')\nfig.supxlabel('Time')\nfig.supylabel('Downwelling IR Rad. / Upwelling IR Rad.')\nax1.plot((wf_rad.down_long_hemisp/wf_rad.up_long_hemisp),color='red') # Ratio of downwelling and upwelling IR radiation\nax1.set_ylim([0.6,0.9])\nax2.plot((bkg_rad.down_long_hemisp/bkg_rad.up_long_hemisp),color='black') # Ratio of downwelling and upwelling IR radiation\nax2.set_ylim([0.6,0.9])","type":"content","url":"/radiometer#longwave-ir-radiation-ratios","position":3},{"hierarchy":{"lvl1":"Size dsitributions from SMPS distributions"},"type":"lvl1","url":"/smps","position":0},{"hierarchy":{"lvl1":"Size dsitributions from SMPS distributions"},"content":"","type":"content","url":"/smps","position":1},{"hierarchy":{"lvl1":"Size dsitributions from SMPS distributions"},"type":"lvl1","url":"/smps#size-dsitributions-from-smps-distributions","position":2},{"hierarchy":{"lvl1":"Size dsitributions from SMPS distributions"},"content":"\n\n\nimport act\nimport numpy as np\nimport xarray as xr\nimport matplotlib.pyplot as plt\n\nusername = 'rppoland18'\ntoken = '3127641b73e77c24'\n\n# Set the datastream and start/enddates\ndatastream = 'gucaossmpsS2.b1'\nstartdate = '2021-10-27'\nenddate = '2023-06-16'\n\n# Use ACT to easily download the data.  Watch for the data citation!  Show some support\n# for ARM's instrument experts and cite their data if you use it in a publication\nsp = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\nsmps = act.io.read_arm_netcdf(sp)\nsmps\n\n# Compiling total SMPS number concentrations for days of interest\nwf = smps.sel(time=slice('2022-01-25T00:00:00','2022-01-29T00:00:00')) # slice days of interest (wildifre day)\nwf_av = wf.mean(dim='time') # Calculate mean of variables over time\n# print(wf_av.total_N_conc.values) # Average total concentration (cm^-3)\n\ndust = smps.sel(time=slice('2023-04-03T00:00:00','2023-04-07T00:00:00')) # Slice for days of dust event\ndust_av = dust.mean(dim='time') # Average over days\n# print(dust_av.total_N_conc.values)\n\nbkg = smps.sel(time=slice('2022-01-03T00:00:00','2022-01-07T00:00:00')) # Slice for background days\nbkg_av = bkg.mean(dim='time') # Average over days\n# print(bkg_av.total_N_conc.values)\n\n# Now Plot!\nplt.figure(figsize=[10,5])\nplt.semilogx(bkg_av.dN_dlogDp,color='black')\nplt.semilogx(wf_av.dN_dlogDp,color='red')\nplt.semilogx(dust_av.dN_dlogDp,color='orange')\nplt.legend(['background','wildfire','dust'])\nplt.xlim([0,200])\nplt.xlabel('Particle Diameter (nm)')\nplt.ylabel('Number Concentration (cm^-3)')","type":"content","url":"/smps#size-dsitributions-from-smps-distributions","position":3},{"hierarchy":{"lvl1":"SP2 Plots For SAIL events"},"type":"lvl1","url":"/notebooks/ajcssailnotebook","position":0},{"hierarchy":{"lvl1":"SP2 Plots For SAIL events"},"content":"\n\n","type":"content","url":"/notebooks/ajcssailnotebook","position":1},{"hierarchy":{"lvl1":"SP2 Plots For SAIL events","lvl2":"Overview"},"type":"lvl2","url":"/notebooks/ajcssailnotebook#overview","position":2},{"hierarchy":{"lvl1":"SP2 Plots For SAIL events","lvl2":"Overview"},"content":"This notebook will introduce the basics of gridded, labeled data with Xarray. Since Xarray introduces additional abstractions on top of plain arrays of data, our goal is to show why these abstractions are useful and how they frequently lead to simpler, more robust code.\n\nWe’ll cover these topics:\n\nCreate a DataArray, one of the core object types in Xarray\n\nUnderstand how to use named coordinates and metadata in a DataArray\n\nCombine individual DataArrays into a Dataset, the other core object type in Xarray\n\nSubset, slice, and interpolate the data using named coordinates\n\nOpen netCDF data using XArray\n\nBasic subsetting and aggregation of a Dataset\n\nBrief introduction to plotting with Xarray\n\n","type":"content","url":"/notebooks/ajcssailnotebook#overview","position":3},{"hierarchy":{"lvl1":"SP2 Plots For SAIL events","lvl2":"Prerequisites"},"type":"lvl2","url":"/notebooks/ajcssailnotebook#prerequisites","position":4},{"hierarchy":{"lvl1":"SP2 Plots For SAIL events","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nNumPy Basics\n\nNecessary\n\n\n\nIntermediate NumPy\n\nHelpful\n\nFamiliarity with indexing and slicing arrays\n\nNumPy Broadcasting\n\nHelpful\n\nFamiliar with array arithmetic and broadcasting\n\nIntroduction to Pandas\n\nHelpful\n\nFamiliarity with labeled data\n\nDatetime\n\nHelpful\n\nFamiliarity with time formats and the timedelta object\n\nUnderstanding of NetCDF\n\nHelpful\n\nFamiliarity with metadata structure\n\nTime to learn: 30 minutes\n\n\n\n","type":"content","url":"/notebooks/ajcssailnotebook#prerequisites","position":5},{"hierarchy":{"lvl1":"SP2 Plots For SAIL events","lvl2":"Imports"},"type":"lvl2","url":"/notebooks/ajcssailnotebook#imports","position":6},{"hierarchy":{"lvl1":"SP2 Plots For SAIL events","lvl2":"Imports"},"content":"\n\nSimmilar to numpy, np; pandas, pd; you may often encounter xarray imported within a shortened namespace as xr.\n\nimport act\nimport numpy as np\nimport xarray as xr\nimport matplotlib.pyplot as plt\n\n","type":"content","url":"/notebooks/ajcssailnotebook#imports","position":7},{"hierarchy":{"lvl1":"SP2 Plots For SAIL events","lvl2":"Introducing the DataArray and Dataset"},"type":"lvl2","url":"/notebooks/ajcssailnotebook#introducing-the-dataarray-and-dataset","position":8},{"hierarchy":{"lvl1":"SP2 Plots For SAIL events","lvl2":"Introducing the DataArray and Dataset"},"content":"Xarray expands on the capabilities on NumPy arrays, providing a lot of streamlined data manipulation. It is similar in that respect to Pandas, but whereas Pandas excels at working with tabular data, Xarray is focused on N-dimensional arrays of data (i.e. grids). Its interface is based largely on the netCDF data model (variables, attributes, and dimensions), but it goes beyond the traditional netCDF interfaces to provide functionality similar to netCDF-java’s \n\nCommon Data Model (CDM).\n\n","type":"content","url":"/notebooks/ajcssailnotebook#introducing-the-dataarray-and-dataset","position":9},{"hierarchy":{"lvl1":"SP2 Plots For SAIL events","lvl3":"For event #1 Jan2-7 2022","lvl2":"Introducing the DataArray and Dataset"},"type":"lvl3","url":"/notebooks/ajcssailnotebook#for-event-1-jan2-7-2022","position":10},{"hierarchy":{"lvl1":"SP2 Plots For SAIL events","lvl3":"For event #1 Jan2-7 2022","lvl2":"Introducing the DataArray and Dataset"},"content":"\n\n###For Event #3\n\n# Set your username and token here!\nusername = 'adriancortessantos'\ntoken = '<https://adc.arm.gov/armlive/livedata/home>`_.'\n\n# Set the datastream and start/enddates\ndatastream = 'gucaossp2bc60sS2.b1'\nstartdate = '2022-01-02'\nenddate = '2022-01-08'\n\n# Use ACT to easily download the data.  Watch for the data citation!  Show some support\n# for ARM's instrument experts and cite their data if you use it in a publication\nresult = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\nds_sp2 = act.io.read_arm_netcdf(result)\n\nprint(ds_sp2)\n\nPlot rBc Concentration with xarray\n\nimport xarray as xr\nimport matplotlib.pyplot as plt\n\n\n# Assuming you have already loaded your dataset as sp2_ds\n# Plot the sp2_rbc_conc over time\nds_sp2['sp2_rbc_conc'].plot()\nplt.title('SP2 RBC Concentration Over Time')\nplt.xlabel('Date')\nplt.ylabel('ng/m^3')\nplt.show()\n\n\nApply Date-night highlight\n\nimport xarray as xr\nimport matplotlib.pyplot as plt\n\n# Assuming you have already loaded your dataset as sp2_ds\n# Plot the sp2_rbc_conc over time\nfig, ax = plt.subplots()\nds_sp2['sp2_rbc_conc'].plot(ax=ax)\nax.set_title('SP2 RBC Concentration Over Time')\nax.set_xlabel('Date')\nax.set_ylabel('ng/m^3')\n\n# Define day and night periods (assuming 6 AM to 6 PM as day)\nday_start = 6   # 6 AM\nday_end = 18    # 6 PM\n\n# Shade periods for each day in the dataset\ndate_range = pd.date_range(ds_sp2['time'].min().values, ds_sp2['time'].max().values, freq='D')\n\nfor date in date_range:\n    # Night period before day start\n    ax.axvspan(date, date + pd.Timedelta(hours=day_start), color='grey', alpha=0.3)\n    # Day period\n    ax.axvspan(date + pd.Timedelta(hours=day_start), date + pd.Timedelta(hours=day_end), color='yellow', alpha=0.3)\n    # Night period after day end\n    ax.axvspan(date + pd.Timedelta(hours=day_end), date + pd.Timedelta(hours=24), color='grey', alpha=0.3)\n\nplt.show()\n\nimport xarray as xr\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Assuming 'ds_sp2' is already loaded and 'sp2_cnts' is computed\nsp2_cnts = ds_sp2['sp2_cnts'].compute()\n\n# Convert 'time' to a regular NumPy array of datetime objects for compatibility\ntimes = ds_sp2['time'].values\nbins = ds_sp2['bin'].values\n\n# Filter bins and sp2_cnts for bins <= 0.6 micrometers\nmask = bins <= 0.5\nfiltered_bins = bins[mask]\nfiltered_sp2_cnts = sp2_cnts[:, mask]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(15, 7))\n# Use meshgrid to create 2D grid coordinates for times and filtered bins, necessary for pcolormesh\nT, B = np.meshgrid(times, filtered_bins)\n# Plot with specified color scale range\nc = ax.pcolormesh(T, B, filtered_sp2_cnts.T, shading='auto', vmin=0, vmax=40)  # Set color scale limits here\n\n# Adding a colorbar to represent the concentration scales\ncbar = plt.colorbar(c, ax=ax)\ncbar.set_label('SP2 Counts')\n\n# Customization of the plot\nax.set_title('SP2 Counts Over Time by Size Bin from January 2-7, 2022')\nax.set_xlabel('Time')\nax.set_ylabel('Size Bin (μm)')\n\n# Format x-axis to handle datetime objects nicely\nplt.gcf().autofmt_xdate()  # Auto format date labels\n\nplt.show()\n\n","type":"content","url":"/notebooks/ajcssailnotebook#for-event-1-jan2-7-2022","position":11},{"hierarchy":{"lvl1":"SP2 Plots For SAIL events","lvl3":"For Event 2 Jan 20-30","lvl2":"Introducing the DataArray and Dataset"},"type":"lvl3","url":"/notebooks/ajcssailnotebook#for-event-2-jan-20-30","position":12},{"hierarchy":{"lvl1":"SP2 Plots For SAIL events","lvl3":"For Event 2 Jan 20-30","lvl2":"Introducing the DataArray and Dataset"},"content":"\n\n# Set your username and token here!\nusername = 'adriancortessantos'\ntoken = '<https://adc.arm.gov/armlive/livedata/home>`_.'\n\n# Set the datastream and start/enddates\ndatastream = 'gucaossp2bc60sS2.b1'\nstartdate = '2022-01-20'\nenddate = '2022-01-30'\n\n# Use ACT to easily download the data.  Watch for the data citation!  Show some support\n# for ARM's instrument experts and cite their data if you use it in a publication\nresult = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\nds_sp2 = act.io.read_arm_netcdf(result)\n\nimport xarray as xr\nimport matplotlib.pyplot as plt\n\n# Assuming you have already loaded your dataset as sp2_ds\n# Plot the sp2_rbc_conc over time\nfig, ax = plt.subplots()\nds_sp2['sp2_rbc_conc'].plot(ax=ax)\nax.set_title('SP2 RBC Concentration Over Time')\nax.set_xlabel('Date')\nax.set_ylabel('ng/m^3')\n\n# Define day and night periods (assuming 6 AM to 6 PM as day)\nday_start = 6   # 6 AM\nday_end = 18    # 6 PM\n\n# Shade periods for each day in the dataset\ndate_range = pd.date_range(ds_sp2['time'].min().values, ds_sp2['time'].max().values, freq='D')\n\nfor date in date_range:\n    # Night period before day start\n    ax.axvspan(date, date + pd.Timedelta(hours=day_start), color='grey', alpha=0.3)\n    # Day period\n    ax.axvspan(date + pd.Timedelta(hours=day_start), date + pd.Timedelta(hours=day_end), color='yellow', alpha=0.3)\n    # Night period after day end\n    ax.axvspan(date + pd.Timedelta(hours=day_end), date + pd.Timedelta(hours=24), color='grey', alpha=0.3)\n\nplt.show()\n\nimport xarray as xr\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Assuming 'ds_sp2' is already loaded and 'sp2_cnts' is computed\nsp2_cnts = ds_sp2['sp2_cnts'].compute()\n\n# Convert 'time' to a regular NumPy array of datetime objects for compatibility\ntimes = ds_sp2['time'].values\nbins = ds_sp2['bin'].values\n\n# Filter bins and sp2_cnts for bins <= 0.6 micrometers\nmask = bins <= 0.5\nfiltered_bins = bins[mask]\nfiltered_sp2_cnts = sp2_cnts[:, mask]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(15, 7))\n# Use meshgrid to create 2D grid coordinates for times and filtered bins, necessary for pcolormesh\nT, B = np.meshgrid(times, filtered_bins)\n# Plot with specified color scale range\nc = ax.pcolormesh(T, B, filtered_sp2_cnts.T, shading='auto', vmin=0, vmax=40)  # Set color scale limits here\n\n# Adding a colorbar to represent the concentration scales\ncbar = plt.colorbar(c, ax=ax)\ncbar.set_label('SP2 Counts')\n\n# Customization of the plot\nax.set_title('SP2 Counts Over Time by Size Bin from January 20-30, 2022')\nax.set_xlabel('Time')\nax.set_ylabel('Size Bin (μm)')\n\n# Format x-axis to handle datetime objects nicely\nplt.gcf().autofmt_xdate()  # Auto format date labels\n\nplt.show()\n\n","type":"content","url":"/notebooks/ajcssailnotebook#for-event-2-jan-20-30","position":13},{"hierarchy":{"lvl1":"SP2 Plots For SAIL events","lvl3":"For event 3  Apr3-8 2022","lvl2":"Introducing the DataArray and Dataset"},"type":"lvl3","url":"/notebooks/ajcssailnotebook#for-event-3-apr3-8-2022","position":14},{"hierarchy":{"lvl1":"SP2 Plots For SAIL events","lvl3":"For event 3  Apr3-8 2022","lvl2":"Introducing the DataArray and Dataset"},"content":"\n\n# Set your username and token here!\nusername = 'adriancortessantos'\ntoken = '<https://adc.arm.gov/armlive/livedata/home>`_.'\n\n# Set the datastream and start/enddates\ndatastream = 'gucaossp2bc60sS2.b1'\nstartdate = '2022-04-03'\nenddate = '2022-04-08'\n\n\n# Use ACT to easily download the data.  Watch for the data citation!  Show some support\n# for ARM's instrument experts and cite their data if you use it in a publication\nresult = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\nds_sp2 = act.io.read_arm_netcdf(result)\n\nimport xarray as xr\nimport matplotlib.pyplot as plt\n\n# Assuming you have already loaded your dataset as sp2_ds\n# Plot the sp2_rbc_conc over time\nfig, ax = plt.subplots()\nds_sp2['sp2_rbc_conc'].plot(ax=ax)\nax.set_title('SP2 RBC Concentration Over Time')\nax.set_xlabel('Date')\nax.set_ylabel('ng/m^3')\n\n# Define day and night periods (assuming 6 AM to 6 PM as day)\nday_start = 6   # 6 AM\nday_end = 18    # 6 PM\n\n# Shade periods for each day in the dataset\ndate_range = pd.date_range(ds_sp2['time'].min().values, ds_sp2['time'].max().values, freq='D')\n\nfor date in date_range:\n    # Night period before day start\n    ax.axvspan(date, date + pd.Timedelta(hours=day_start), color='grey', alpha=0.3)\n    # Day period\n    ax.axvspan(date + pd.Timedelta(hours=day_start), date + pd.Timedelta(hours=day_end), color='yellow', alpha=0.3)\n    # Night period after day end\n    ax.axvspan(date + pd.Timedelta(hours=day_end), date + pd.Timedelta(hours=24), color='grey', alpha=0.3)\n\nplt.show()\n\nimport xarray as xr\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Assuming 'ds_sp2' is already loaded and 'sp2_cnts' is computed\nsp2_cnts = ds_sp2['sp2_cnts'].compute()\n\n# Convert 'time' to a regular NumPy array of datetime objects for compatibility\ntimes = ds_sp2['time'].values\nbins = ds_sp2['bin'].values\n\n# Filter bins and sp2_cnts for bins <= 0.6 micrometers\nmask = bins <= 0.5\nfiltered_bins = bins[mask]\nfiltered_sp2_cnts = sp2_cnts[:, mask]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(15, 7))\n# Use meshgrid to create 2D grid coordinates for times and filtered bins, necessary for pcolormesh\nT, B = np.meshgrid(times, filtered_bins)\n# Plot with specified color scale range\nc = ax.pcolormesh(T, B, filtered_sp2_cnts.T, shading='auto', vmin=0, vmax=40)  # Set color scale limits here\n\n# Adding a colorbar to represent the concentration scales\ncbar = plt.colorbar(c, ax=ax)\ncbar.set_label('SP2 Counts')\n\n# Customization of the plot\nax.set_title('SP2 Counts Over Time by Size Bin from April 3-7, 2022')\nax.set_xlabel('Time')\nax.set_ylabel('Size Bin (μm)')\n\n# Format x-axis to handle datetime objects nicely\nplt.gcf().autofmt_xdate()  # Auto format date labels\n\nplt.show()","type":"content","url":"/notebooks/ajcssailnotebook#for-event-3-apr3-8-2022","position":15},{"hierarchy":{"lvl1":"Source determination through NOAA HYSPLIT trajectory model"},"type":"lvl1","url":"/notebooks/hysplit-joy","position":0},{"hierarchy":{"lvl1":"Source determination through NOAA HYSPLIT trajectory model"},"content":"","type":"content","url":"/notebooks/hysplit-joy","position":1},{"hierarchy":{"lvl1":"Source determination through NOAA HYSPLIT trajectory model","lvl3":"Source determination through NOAA HYSPLIT trajectory model"},"type":"lvl3","url":"/notebooks/hysplit-joy#source-determination-through-noaa-hysplit-trajectory-model","position":2},{"hierarchy":{"lvl1":"Source determination through NOAA HYSPLIT trajectory model","lvl3":"Source determination through NOAA HYSPLIT trajectory model"},"content":"\n\n       \n\n","type":"content","url":"/notebooks/hysplit-joy#source-determination-through-noaa-hysplit-trajectory-model","position":3},{"hierarchy":{"lvl1":"Source determination through NOAA HYSPLIT trajectory model","lvl2":"HYSPLIT models simulate the dispersion and trajectory of substances transported and dispersed through our atmosphere, over local to global scales."},"type":"lvl2","url":"/notebooks/hysplit-joy#hysplit-models-simulate-the-dispersion-and-trajectory-of-substances-transported-and-dispersed-through-our-atmosphere-over-local-to-global-scales","position":4},{"hierarchy":{"lvl1":"Source determination through NOAA HYSPLIT trajectory model","lvl2":"HYSPLIT models simulate the dispersion and trajectory of substances transported and dispersed through our atmosphere, over local to global scales."},"content":"","type":"content","url":"/notebooks/hysplit-joy#hysplit-models-simulate-the-dispersion-and-trajectory-of-substances-transported-and-dispersed-through-our-atmosphere-over-local-to-global-scales","position":5},{"hierarchy":{"lvl1":"Source determination through NOAA HYSPLIT trajectory model","lvl3":"A common application is a back trajectory analysis to determine the origin of air masses and establish source-receptor relationships.","lvl2":"HYSPLIT models simulate the dispersion and trajectory of substances transported and dispersed through our atmosphere, over local to global scales."},"type":"lvl3","url":"/notebooks/hysplit-joy#a-common-application-is-a-back-trajectory-analysis-to-determine-the-origin-of-air-masses-and-establish-source-receptor-relationships","position":6},{"hierarchy":{"lvl1":"Source determination through NOAA HYSPLIT trajectory model","lvl3":"A common application is a back trajectory analysis to determine the origin of air masses and establish source-receptor relationships.","lvl2":"HYSPLIT models simulate the dispersion and trajectory of substances transported and dispersed through our atmosphere, over local to global scales."},"content":"\n\n# import libraries\nimport xarray as xr   # for data storage and processing\nimport numpy as np    # for data storage and processig\nimport pandas as pd   # for data storage and processig\nimport act\nfrom datetime import datetime  # for formating date and time\nimport matplotlib.pyplot as plt\n\n# define the function to read the HYSPLIT model output file\ndef read_hysplit(filename, base_year=2000):\n    \"\"\"\n    Reads an input HYSPLIT trajectory for plotting in ACT.\n    Parameters\n    ----------\n    filename: str\n        The input file name.\n    base_year: int\n        The first year of the century in which the data are contained.\n    Returns\n    -------\n    ds: xarray Dataset\n        The ACT dataset containing the HYSPLIT trajectories\n    \"\"\"\n    ds = xr.Dataset({})\n    num_lines = 0\n    with open(filename) as filebuf:\n        num_grids = int(filebuf.readline().split()[0])\n        num_lines += 1\n        grid_times = []\n        grid_names = []\n        forecast_hours = np.zeros(num_grids)\n        for i in range(num_grids):\n            data = filebuf.readline().split()\n            num_lines += 1\n            grid_names.append(data[0])\n            grid_times.append(\n                datetime(\n                    year=(int(data[1]) + base_year),\n                    month=int(data[2]),\n                    day=int(data[3]),\n                    hour=int(data[4]),\n                )\n            )\n            forecast_hours[i] = int(data[5])\n        ds[\"grid_forecast_hour\"] = xr.DataArray(forecast_hours, dims=[\"num_grids\"])\n        ds[\"grid_forecast_hour\"].attrs[\"standard_name\"] = \"Grid forecast hour\"\n        ds[\"grid_forecast_hour\"].attrs[\"units\"] = \"Hour [UTC]\"\n        ds[\"grid_times\"] = xr.DataArray(np.array(grid_times), dims=[\"num_grids\"])\n        data_line = filebuf.readline().split()\n        num_lines += 1\n        ds.attrs[\"trajectory_direction\"] = data_line[1]\n        ds.attrs[\"vertical_motion_calculation_method\"] = data_line[2]\n        num_traj = int(data_line[0])\n        traj_times = []\n        start_lats = np.zeros(num_traj)\n        start_lons = np.zeros(num_traj)\n        start_alt = np.zeros(num_traj)\n        for i in range(num_traj):\n            data = filebuf.readline().split()\n            num_lines += 1\n            traj_times.append(\n                datetime(\n                    year=(base_year + int(data[0])),\n                    month=int(data[1]),\n                    day=int(data[2]),\n                    hour=int(data[3]),\n                )\n            )\n            start_lats[i] = float(data[4])\n            start_lons[i] = float(data[5])\n            start_alt[i] = float(data[6])\n        ds[\"start_latitude\"] = xr.DataArray(start_lats, dims=[\"num_trajectories\"])\n        ds[\"start_latitude\"].attrs[\"long_name\"] = \"Trajectory start latitude\"\n        ds[\"start_latitude\"].attrs[\"units\"] = \"degree\"\n        ds[\"start_longitude\"] = xr.DataArray(start_lats, dims=[\"num_trajectories\"])\n        ds[\"start_longitude\"].attrs[\"long_name\"] = \"Trajectory start longitude\"\n        ds[\"start_longitude\"].attrs[\"units\"] = \"degree\"\n        ds[\"start_altitude\"] = xr.DataArray(start_alt, dims=[\"num_trajectories\"])\n        ds[\"start_altitude\"].attrs[\"long_name\"] = \"Trajectory start altitude\"\n        ds[\"start_altitude\"].attrs[\"units\"] = \"degree\"\n        data = filebuf.readline().split()\n        num_lines += 1\n        var_list = [\n            \"trajectory_number\",\n            \"grid_number\",\n            \"year\",\n            \"month\",\n            \"day\",\n            \"hour\",\n            \"minute\",\n            \"forecast_hour\",\n            \"age\",\n            \"lat\",\n            \"lon\",\n            \"alt\",\n        ]\n        for variable in data[1:]:\n            var_list.append(variable)\n        input_df = pd.read_csv(\n            filebuf, sep=r'\\s+', index_col=False, names=var_list, skiprows=1\n        )  # noqa W605\n        input_df['year'] = base_year + input_df['year']\n        input_df['year'] = input_df['year'].astype(int)\n        input_df['month'] = input_df['month'].astype(int)\n        input_df['day'] = input_df['day'].astype(int)\n        input_df['hour'] = input_df['hour'].astype(int)\n        input_df['minute'] = input_df['minute'].astype(int)\n        input_df['time'] = pd.to_datetime(\n            input_df[[\"year\", \"month\", \"day\", \"hour\", \"minute\"]], format='%y%m%d%H%M'\n        )\n        input_df = input_df.set_index(\"time\")\n        del input_df[\"year\"]\n        del input_df[\"month\"]\n        del input_df[\"day\"]\n        del input_df[\"hour\"]\n        del input_df[\"minute\"]\n        ds = ds.merge(input_df.to_xarray())\n        ds.attrs['datastream'] = 'hysplit'\n        ds[\"trajectory_number\"].attrs[\"standard_name\"] = \"Trajectory number\"\n        ds[\"trajectory_number\"].attrs[\"units\"] = \"1\"\n        ds[\"grid_number\"].attrs[\"standard_name\"] = \"Grid number\"\n        ds[\"grid_number\"].attrs[\"units\"] = \"1\"\n        ds[\"age\"].attrs[\"standard_name\"] = \"Grid number\"\n        ds[\"age\"].attrs[\"units\"] = \"1\"\n        ds[\"lat\"].attrs[\"standard_name\"] = \"Latitude\"\n        ds[\"lat\"].attrs[\"units\"] = \"degree\"\n        ds[\"lon\"].attrs[\"standard_name\"] = \"Longitude\"\n        ds[\"lon\"].attrs[\"units\"] = \"degree\"\n        ds[\"alt\"].attrs[\"standard_name\"] = \"Altitude\"\n        ds[\"alt\"].attrs[\"units\"] = \"meter\"\n    return ds\n\n","type":"content","url":"/notebooks/hysplit-joy#a-common-application-is-a-back-trajectory-analysis-to-determine-the-origin-of-air-masses-and-establish-source-receptor-relationships","position":7},{"hierarchy":{"lvl1":"Source determination through NOAA HYSPLIT trajectory model","lvl2":"Plotting HYSPLIT back trajectory and compare with NASA firemap"},"type":"lvl2","url":"/notebooks/hysplit-joy#plotting-hysplit-back-trajectory-and-compare-with-nasa-firemap","position":8},{"hierarchy":{"lvl1":"Source determination through NOAA HYSPLIT trajectory model","lvl2":"Plotting HYSPLIT back trajectory and compare with NASA firemap"},"content":"\n\n","type":"content","url":"/notebooks/hysplit-joy#plotting-hysplit-back-trajectory-and-compare-with-nasa-firemap","position":9},{"hierarchy":{"lvl1":"Source determination through NOAA HYSPLIT trajectory model","lvl3":"Case 1: Jan 8th, 2022","lvl2":"Plotting HYSPLIT back trajectory and compare with NASA firemap"},"type":"lvl3","url":"/notebooks/hysplit-joy#case-1-jan-8th-2022","position":10},{"hierarchy":{"lvl1":"Source determination through NOAA HYSPLIT trajectory model","lvl3":"Case 1: Jan 8th, 2022","lvl2":"Plotting HYSPLIT back trajectory and compare with NASA firemap"},"content":"\n\n# Load the data\nfilename = 'guc_010822.txt'\nds = read_hysplit(filename)\n\n# Use the GeographicPlotDisplay object to make the plot\ndisp = act.plotting.GeographicPlotDisplay(ds)\nax = disp.geoplot('PRESSURE', cartopy_feature=['STATES', 'OCEAN', 'LAND'], s = 1)\nax.set_xlim([-159, -67])\nax.set_ylim([20, 77])\nplt.show()\n\n\n\n","type":"content","url":"/notebooks/hysplit-joy#case-1-jan-8th-2022","position":11},{"hierarchy":{"lvl1":"Fire Map Link"},"type":"lvl1","url":"/notebooks/hysplit-joy#fire-map-link","position":12},{"hierarchy":{"lvl1":"Fire Map Link"},"content":"\n\nClick here to view the interactive map\n\n","type":"content","url":"/notebooks/hysplit-joy#fire-map-link","position":13},{"hierarchy":{"lvl1":"Fire Map Link","lvl3":"Case 2: Jan 25th, 2022"},"type":"lvl3","url":"/notebooks/hysplit-joy#case-2-jan-25th-2022","position":14},{"hierarchy":{"lvl1":"Fire Map Link","lvl3":"Case 2: Jan 25th, 2022"},"content":"\n\n# Load the data\nfilename = 'guc_012522.txt'\nds = read_hysplit(filename)\n\n# Use the GeographicPlotDisplay object to make the plot\ndisp = act.plotting.GeographicPlotDisplay(ds)\nax = disp.geoplot('PRESSURE', cartopy_feature=['STATES', 'OCEAN', 'LAND'], s = 1)\nax.set_xlim([-159, -67])\nax.set_ylim([20, 77])\nplt.show()\n\n\n\n","type":"content","url":"/notebooks/hysplit-joy#case-2-jan-25th-2022","position":15},{"hierarchy":{"lvl1":"Fire Map Link","lvl3":"Case 3: Apr 3rd, 2023"},"type":"lvl3","url":"/notebooks/hysplit-joy#case-3-apr-3rd-2023","position":16},{"hierarchy":{"lvl1":"Fire Map Link","lvl3":"Case 3: Apr 3rd, 2023"},"content":"\n\n# Load the data\nfilename = 'guc_040323.txt'\nds = read_hysplit(filename)\n\n# Use the GeographicPlotDisplay object to make the plot\ndisp = act.plotting.GeographicPlotDisplay(ds)\nax = disp.geoplot('PRESSURE', cartopy_feature=['STATES', 'OCEAN', 'LAND'], s = 1)\nax.set_xlim([-159, -67])\nax.set_ylim([20, 77])\nplt.show()\n\n\n\n\n\nfrom IPython.display import display, HTML\n\n# Adjust the path to your HTML file accordingly\nfile_path = \"ARM_smps_data.html\"\n\n# Read the content of the HTML file\nwith open(file_path, 'r') as file:\n    html_content = file.read()\n\n# Display the HTML content\ndisplay(HTML(html_content))\n","type":"content","url":"/notebooks/hysplit-joy#case-3-apr-3rd-2023","position":17},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign"},"type":"lvl1","url":"/notebooks/aop-spa2","position":0},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign"},"content":"In order to assess aerosol’s effects on surface snow albedo we first found a smoke, dust, and neutral event to compare. These events are Jan 25 – 30th 2022, Apr 3 – 8th 2023, and Jan 2 – 7th 2023 respectively.\n\n\n\n\n\n\n\nimport os\nimport warnings\n\nimport cartopy.crs as ccrs\nimport matplotlib.pyplot as plt\n\nfrom datetime import timedelta\n\nimport cmweather\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\nimport glob\n\nfrom bokeh.models.formatters import DatetimeTickFormatter\nimport hvplot.xarray\nimport holoviews as hv\nhv.extension(\"bokeh\")\n\nimport act\nimport pyart\n\nwarnings.filterwarnings('ignore')\n\n\n\n","type":"content","url":"/notebooks/aop-spa2","position":1},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl2":"Jan 25th - 30th 2022"},"type":"lvl2","url":"/notebooks/aop-spa2#jan-25th-30th-2022","position":2},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl2":"Jan 25th - 30th 2022"},"content":"\n\n# Set your username and token here!\nusername = 'user name'\ntoken = 'token'\n\n# Set the datastream and start/enddates for Smoke event\ndatastream = 'gucaoppsap1flynn1hS2.c1'\nstartdate = '2022-01-25'\nenddate = '2022-01-30'\n\n# Use ACT to download data\nresult = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\nds = act.io.read_arm_netcdf(result)\n\n# Set the datastream and start/enddates for Dust event\ndatastream = 'gucaoppsap1flynn1hS2.c1'\nstartdate = '2023-04-03'\nenddate = '2023-04-08'\n\nresult = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\nds2 = act.io.read_arm_netcdf(result)\n\n# Set the datastream and start/enddates for Control event\ndatastream = 'gucaoppsap1flynn1hS2.c1'\nstartdate = '2022-01-02'\nenddate = '2022-01-07'\n\nresult = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\nds3 = act.io.read_arm_netcdf(result)\n\n# clean the data for each case\nds.clean.cleanup()\nds2.clean.cleanup()\nds3.clean.cleanup()\n\n","type":"content","url":"/notebooks/aop-spa2#jan-25th-30th-2022","position":3},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl3":"Smoke Case Beta Absorption and Scattering","lvl2":"Jan 25th - 30th 2022"},"type":"lvl3","url":"/notebooks/aop-spa2#smoke-case-beta-absorption-and-scattering","position":4},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl3":"Smoke Case Beta Absorption and Scattering","lvl2":"Jan 25th - 30th 2022"},"content":"\n\n# create a display with subplots for Abs and Sca\ndisplay = act.plotting.TimeSeriesDisplay({'PSAP': ds, 'Neph': ds},\n                                         subplot_shape=(2,), figsize=(10,12))\n\n# Plot Abs for the first plot\ndisplay.plot('Ba_G_combined_10um', dsname='Neph', subplot_index=(0,))\ndisplay.day_night_background(dsname='Neph', subplot_index=(0,))\n\n# Plot Sca as the second plot\ndisplay.plot('Bs_G_10um',dsname='PSAP', subplot_index=(1,))\ndisplay.day_night_background(dsname='PSAP',subplot_index=(1,))\n\nplt.show()\n\n","type":"content","url":"/notebooks/aop-spa2#smoke-case-beta-absorption-and-scattering","position":5},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl3":"Smoke Case AAE, AE, and SSA","lvl2":"Jan 25th - 30th 2022"},"type":"lvl3","url":"/notebooks/aop-spa2#smoke-case-aae-ae-and-ssa","position":6},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl3":"Smoke Case AAE, AE, and SSA","lvl2":"Jan 25th - 30th 2022"},"content":"","type":"content","url":"/notebooks/aop-spa2#smoke-case-aae-ae-and-ssa","position":7},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl4":"AAE:","lvl3":"Smoke Case AAE, AE, and SSA","lvl2":"Jan 25th - 30th 2022"},"type":"lvl4","url":"/notebooks/aop-spa2#aae","position":8},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl4":"AAE:","lvl3":"Smoke Case AAE, AE, and SSA","lvl2":"Jan 25th - 30th 2022"},"content":"AAE during the smoke event almost entirely falls between the debated range of black carbon (~1.30 - 0.80).","type":"content","url":"/notebooks/aop-spa2#aae","position":9},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl4":"AE:","lvl3":"Smoke Case AAE, AE, and SSA","lvl2":"Jan 25th - 30th 2022"},"type":"lvl4","url":"/notebooks/aop-spa2#ae","position":10},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl4":"AE:","lvl3":"Smoke Case AAE, AE, and SSA","lvl2":"Jan 25th - 30th 2022"},"content":"AE during the smoke event stays in the threshold of fine mode particles (~1.7) and sees a decrease in particles sizes ~2 days into the event.","type":"content","url":"/notebooks/aop-spa2#ae","position":11},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl4":"SSA:","lvl3":"Smoke Case AAE, AE, and SSA","lvl2":"Jan 25th - 30th 2022"},"type":"lvl4","url":"/notebooks/aop-spa2#ssa","position":12},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl4":"SSA:","lvl3":"Smoke Case AAE, AE, and SSA","lvl2":"Jan 25th - 30th 2022"},"content":"SSA during the smoke event held in the upper 0.80s which while not far from 1.0 is still indicative of darker absorbing particles. SSA dropped further in the final two days of the event.\n\n# create a line to indicate important points\nline = np.ones(24*5)\n# create a display with subplots for AAE, AE, and SSA\ndisplay = act.plotting.TimeSeriesDisplay(ds, figsize=(13, 10), subplot_shape=(3,))\n\n# plot AAE\ndisplay.plot('AAE_BR_10um', subplot_index=(0,))\n# indicate black carbon\ndisplay.axes[0].plot(ds['time'], line, 'k', linewidth=1, linestyle='--')\ndisplay.day_night_background(subplot_index=(0,))\n\n# plot AE\ndisplay.plot('AE_BR_10um', subplot_index=(1,))\n# indicate fine mode\ndisplay.axes[1].plot(ds['time'], line *1.7, 'k', linewidth=1, linestyle='--')\n# indicate coarse mode\ndisplay.axes[1].plot(ds['time'], line, 'k', linewidth=1, linestyle='--')\ndisplay.day_night_background(subplot_index=(1,))\n\n# plot ssa\ndisplay.plot('ssa_G_10um', subplot_index=(2,))\ndisplay.day_night_background(subplot_index=(2,))\n\n\n","type":"content","url":"/notebooks/aop-spa2#ssa","position":13},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl2":"April 3rd - 8th 2023"},"type":"lvl2","url":"/notebooks/aop-spa2#april-3rd-8th-2023","position":14},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl2":"April 3rd - 8th 2023"},"content":"\n\n","type":"content","url":"/notebooks/aop-spa2#april-3rd-8th-2023","position":15},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl3":"Dust Case Beta Absorption and Scattering","lvl2":"April 3rd - 8th 2023"},"type":"lvl3","url":"/notebooks/aop-spa2#dust-case-beta-absorption-and-scattering","position":16},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl3":"Dust Case Beta Absorption and Scattering","lvl2":"April 3rd - 8th 2023"},"content":"\n\n# create a display with subplots for Abs and Sca\ndisplay = act.plotting.TimeSeriesDisplay({'PSAP': ds2, 'Neph': ds2},\n                                         subplot_shape=(2,), figsize=(10,12))\n\n# Plot Abs for the first plot\ndisplay.plot('Ba_G_combined_10um', dsname='Neph', subplot_index=(0,))\ndisplay.day_night_background(dsname='Neph', subplot_index=(0,))\n\n# Plot Sca as the second plot\ndisplay.plot('Bs_G_10um',dsname='PSAP', subplot_index=(1,))\ndisplay.day_night_background(dsname='PSAP',subplot_index=(1,))\n\nplt.show()\n\n","type":"content","url":"/notebooks/aop-spa2#dust-case-beta-absorption-and-scattering","position":17},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl3":"Dust Case AAE, AE, and SSA","lvl2":"April 3rd - 8th 2023"},"type":"lvl3","url":"/notebooks/aop-spa2#dust-case-aae-ae-and-ssa","position":18},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl3":"Dust Case AAE, AE, and SSA","lvl2":"April 3rd - 8th 2023"},"content":"","type":"content","url":"/notebooks/aop-spa2#dust-case-aae-ae-and-ssa","position":19},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl4":"AAE:","lvl3":"Dust Case AAE, AE, and SSA","lvl2":"April 3rd - 8th 2023"},"type":"lvl4","url":"/notebooks/aop-spa2#aae-1","position":20},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl4":"AAE:","lvl3":"Dust Case AAE, AE, and SSA","lvl2":"April 3rd - 8th 2023"},"content":"AAE during the dust event is mostly held above or around the upper limit of black carbon (~1.30 - 0.80). This likely indicates the presence of brown carbons or other dust-like particles as expected.","type":"content","url":"/notebooks/aop-spa2#aae-1","position":21},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl4":"AE:","lvl3":"Dust Case AAE, AE, and SSA","lvl2":"April 3rd - 8th 2023"},"type":"lvl4","url":"/notebooks/aop-spa2#ae-1","position":22},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl4":"AE:","lvl3":"Dust Case AAE, AE, and SSA","lvl2":"April 3rd - 8th 2023"},"content":"AE during the dust event fluctuated between values < 1.a (course mode) for the first two days, > 1.7 (fine mode) for the next two days, and back to course mode for the final two days.","type":"content","url":"/notebooks/aop-spa2#ae-1","position":23},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl4":"SSA:","lvl3":"Dust Case AAE, AE, and SSA","lvl2":"April 3rd - 8th 2023"},"type":"lvl4","url":"/notebooks/aop-spa2#ssa-1","position":24},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl4":"SSA:","lvl3":"Dust Case AAE, AE, and SSA","lvl2":"April 3rd - 8th 2023"},"content":"SSA during the dust event held in the lower to mid 0.90s which indicates relatively bright particles\n\n# create a line to indicate important points\nline = np.ones(24*5)\n# create a display with subplots for AAE, AE, and SSA\ndisplay = act.plotting.TimeSeriesDisplay(ds2, figsize=(13, 10), subplot_shape=(3,))\n\n# plot AAE\ndisplay.plot('AAE_BR_10um', subplot_index=(0,))\n# indicate black carbon\ndisplay.axes[0].plot(ds2['time'], line, 'k', linewidth=1, linestyle='--')\ndisplay.day_night_background(subplot_index=(0,))\n\n# plot AE\ndisplay.plot('AE_BR_10um', subplot_index=(1,))\n# indicate coarse mode\ndisplay.axes[1].plot(ds2['time'], line *1.7, 'k', linewidth=1, linestyle='--')\n# indicate fine mode\ndisplay.axes[1].plot(ds2['time'], line, 'k', linewidth=1, linestyle='--')\ndisplay.day_night_background(subplot_index=(1,))\n\n# plot SSA\ndisplay.plot('ssa_G_10um', subplot_index=(2,))\ndisplay.day_night_background(subplot_index=(2,))\n\n","type":"content","url":"/notebooks/aop-spa2#ssa-1","position":25},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl2":"Jan 2nd - 7th 2022"},"type":"lvl2","url":"/notebooks/aop-spa2#jan-2nd-7th-2022","position":26},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl2":"Jan 2nd - 7th 2022"},"content":"\n\n","type":"content","url":"/notebooks/aop-spa2#jan-2nd-7th-2022","position":27},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl3":"Control Case Beta Absorption and Scattering","lvl2":"Jan 2nd - 7th 2022"},"type":"lvl3","url":"/notebooks/aop-spa2#control-case-beta-absorption-and-scattering","position":28},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl3":"Control Case Beta Absorption and Scattering","lvl2":"Jan 2nd - 7th 2022"},"content":"\n\n# create a display with subplots for Abs and Sca\ndisplay = act.plotting.TimeSeriesDisplay({'PSAP': ds3, 'Neph': ds3},\n                                         subplot_shape=(2,), figsize=(10,12))\n\n# Plot Abs for the first plot\ndisplay.plot('Ba_G_combined_10um', dsname='Neph', subplot_index=(0,))\ndisplay.day_night_background(dsname='Neph', subplot_index=(0,))\n\n# Plot Sca as the second plot\ndisplay.plot('Bs_G_10um',dsname='PSAP', subplot_index=(1,))\ndisplay.day_night_background(dsname='PSAP',subplot_index=(1,))\n\nplt.show()\n\n##Controlt Case AAE, AE, and SSA","type":"content","url":"/notebooks/aop-spa2#control-case-beta-absorption-and-scattering","position":29},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl4":"AAE:","lvl3":"Control Case Beta Absorption and Scattering","lvl2":"Jan 2nd - 7th 2022"},"type":"lvl4","url":"/notebooks/aop-spa2#aae-2","position":30},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl4":"AAE:","lvl3":"Control Case Beta Absorption and Scattering","lvl2":"Jan 2nd - 7th 2022"},"content":"AAE during the control event is mostly held above or around the upper limit of black carbon (~1.30 - 0.80). However, the range of values seems to indicate a variety of particle types present.","type":"content","url":"/notebooks/aop-spa2#aae-2","position":31},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl4":"AE:","lvl3":"Control Case Beta Absorption and Scattering","lvl2":"Jan 2nd - 7th 2022"},"type":"lvl4","url":"/notebooks/aop-spa2#ae-2","position":32},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl4":"AE:","lvl3":"Control Case Beta Absorption and Scattering","lvl2":"Jan 2nd - 7th 2022"},"content":"AE during the control event varied between fine and coarse modes with a preference for fine mode. However, the final two days of the event trended toward values in the course mode range.","type":"content","url":"/notebooks/aop-spa2#ae-2","position":33},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl4":"SSA:","lvl3":"Control Case Beta Absorption and Scattering","lvl2":"Jan 2nd - 7th 2022"},"type":"lvl4","url":"/notebooks/aop-spa2#ssa-2","position":34},{"hierarchy":{"lvl1":"Aeorosl Optical Properties from the SAIL Campaign","lvl4":"SSA:","lvl3":"Control Case Beta Absorption and Scattering","lvl2":"Jan 2nd - 7th 2022"},"content":"SSA during the control event varied between values in the mid-0.90s and the 0.80s or lower. As the event went on there was an increasing trend toward darker particles.\n\n# create a line to indicate important points\nline = np.ones(24*5)\n# create a display with subplots for AAE, AE, and SSA\ndisplay = act.plotting.TimeSeriesDisplay(ds3, figsize=(13, 10), subplot_shape=(3,))\n\n# plot AAE\ndisplay.plot('AAE_BR_10um', subplot_index=(0,))\n# indicate black carbon\ndisplay.axes[0].plot(ds3['time'], line, 'k', linewidth=1, linestyle='--')\ndisplay.day_night_background(subplot_index=(0,))\n\n# plot AE\ndisplay.plot('AE_BR_10um', subplot_index=(1,))\n# indicate coarse mode\ndisplay.axes[1].plot(ds3['time'], line *1.7, 'k', linewidth=1, linestyle='--')\n# indicate fine mode\ndisplay.axes[1].plot(ds3['time'], line, 'k', linewidth=1, linestyle='--')\ndisplay.day_night_background(subplot_index=(1,))\n\n# plot SSA\ndisplay.plot('ssa_G_10um', subplot_index=(2,))\ndisplay.day_night_background(subplot_index=(2,))","type":"content","url":"/notebooks/aop-spa2#ssa-2","position":35},{"hierarchy":{"lvl1":"Dust layer observations"},"type":"lvl1","url":"/notebooks/dust-analysis-with-lidar","position":0},{"hierarchy":{"lvl1":"Dust layer observations"},"content":"# analysis of high aerosol loading during dust event (April 3, 2024)\n# read High Spectra Resolution Lidar (HSRL) data using ACT\n\n### code courtesy of Damao Zhang ###\n\n#%matplotlib widget\nimport ipywidgets as widgets\n\nimport matplotlib.pyplot as plt\nimport ipywidgets as widgets\nimport numpy as np\nimport pandas as pd\nimport os\nfrom datetime import datetime\n\nimport act\nimport xarray as xr\n\n","type":"content","url":"/notebooks/dust-analysis-with-lidar","position":1},{"hierarchy":{"lvl1":"Dust layer observations"},"type":"lvl1","url":"/notebooks/dust-analysis-with-lidar#dust-layer-observations","position":2},{"hierarchy":{"lvl1":"Dust layer observations"},"content":"\n\n### April 3rd, 2022 ###\n# Set your username and token here!\nusername = 'username'\ntoken = 'token'\n\n# Set the datastream and start/enddates\n\ndatastream = 'guchsrlM1.a1'\nstartdate = '2023-04-3'\nenddate = '2023-04-3'\n\n# Use ACT to easily download the data.  Watch for the data citation!  Show some support\n# for ARM's instrument experts and cite their data if you use it in a publication\nresult = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\nresult.sort()\n\nds = act.io.read_arm_netcdf(result)\nds.clean.cleanup()\n\n# compute log of backscatter \nds['beta_a_backscatter_log'] = np.log10(ds['beta_a_backscatter'])\nds['beta_a_backscatter_log'].attrs['units'] = f\"log10({ds['beta_a_backscatter'].attrs['units']})\"\nds = ds.where(ds.range <= 10000, drop=True)\n\nmask = ds['particulate_backscatter_signal_to_noise']>=3\n\n#beta_a_backscatter - column backscatter \nvariables = ['beta_a_backscatter_log', 'linear_depol', 'color_ratio']\n\n# watch out cloudy pixels\ndisplay = act.plotting.TimeSeriesDisplay(ds.where(mask),\n                                         subplot_shape=(3,), figsize=(12,16))\ndisplay.plot(variables[0], subplot_index=(0,))\ndisplay.set_yrng([0, 6000], subplot_index=(0,))\n\n# linear_depol indicates irregular aerosol \ndisplay.plot(variables[1], subplot_index=(1,), vmin = 0, vmax = 0.3)\ndisplay.set_yrng([0, 6000], subplot_index=(0,))\n\n# color_ratio an indicator of aerosol particle size. Large aerosol particles have larger color_ratios\ndisplay.plot(variables[2], subplot_index=(2,), vmin = 0, vmax = 1)\ndisplay.set_yrng([0, 6000], subplot_index=(0,))\n\nplt.show()\n\n### April 4rd, 2022 ###\n# Set your username and token here!\nusername = 'username'\ntoken = 'token'\n\n# Set the datastream and start/enddates\n\ndatastream = 'guchsrlM1.a1'\nstartdate = '2023-04-4'\nenddate = '2023-04-4'\n\n# Use ACT to easily download the data.  Watch for the data citation!  Show some support\n# for ARM's instrument experts and cite their data if you use it in a publication\nresult = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\nresult.sort()\n\nds = act.io.read_arm_netcdf(result)\nds.clean.cleanup()\n\n# compute log of backscatter \nds['beta_a_backscatter_log'] = np.log10(ds['beta_a_backscatter'])\nds['beta_a_backscatter_log'].attrs['units'] = f\"log10({ds['beta_a_backscatter'].attrs['units']})\"\nds = ds.where(ds.range <= 10000, drop=True)\n\nmask = ds['particulate_backscatter_signal_to_noise']>=3\n\n#beta_a_backscatter - column backscatter \nvariables = ['beta_a_backscatter_log', 'linear_depol', 'color_ratio']\n\n# watch out cloudy pixels\ndisplay = act.plotting.TimeSeriesDisplay(ds.where(mask),\n                                         subplot_shape=(3,), figsize=(12,16))\ndisplay.plot(variables[0], subplot_index=(0,))\ndisplay.set_yrng([0, 6000], subplot_index=(0,))\n\n# linear_depol indicates irregular aerosol \ndisplay.plot(variables[1], subplot_index=(1,), vmin = 0, vmax = 0.3)\ndisplay.set_yrng([0, 6000], subplot_index=(0,))\n\n# color_ratio an indicator of aerosol particle size. Large aerosol particles have larger color_ratios\ndisplay.plot(variables[2], subplot_index=(2,), vmin = 0, vmax = 1)\ndisplay.set_yrng([0, 6000], subplot_index=(0,))\n\nplt.show()\n\n### April 5rd, 2022 ###\n# Set your username and token here!\nusername = 'username'\ntoken = 'token'\n\n# Set the datastream and start/enddates\n\ndatastream = 'guchsrlM1.a1'\nstartdate = '2023-04-5'\nenddate = '2023-04-5'\n\n# Use ACT to easily download the data.  Watch for the data citation!  Show some support\n# for ARM's instrument experts and cite their data if you use it in a publication\nresult = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\nresult.sort()\n\nds = act.io.read_arm_netcdf(result)\nds.clean.cleanup()\n\n# compute log of backscatter \nds['beta_a_backscatter_log'] = np.log10(ds['beta_a_backscatter'])\nds['beta_a_backscatter_log'].attrs['units'] = f\"log10({ds['beta_a_backscatter'].attrs['units']})\"\nds = ds.where(ds.range <= 10000, drop=True)\n\nmask = ds['particulate_backscatter_signal_to_noise']>=3\n\n#beta_a_backscatter - column backscatter \nvariables = ['beta_a_backscatter_log', 'linear_depol', 'color_ratio']\n\n# watch out cloudy pixels\ndisplay = act.plotting.TimeSeriesDisplay(ds.where(mask),\n                                         subplot_shape=(3,), figsize=(12,16))\ndisplay.plot(variables[0], subplot_index=(0,))\ndisplay.set_yrng([0, 6000], subplot_index=(0,))\n\n# linear_depol indicates irregular aerosol \ndisplay.plot(variables[1], subplot_index=(1,), vmin = 0, vmax = 0.3)\ndisplay.set_yrng([0, 6000], subplot_index=(0,))\n\n# color_ratio an indicator of aerosol particle size. Large aerosol particles have larger color_ratios\ndisplay.plot(variables[2], subplot_index=(2,), vmin = 0, vmax = 1)\ndisplay.set_yrng([0, 6000], subplot_index=(0,))\n\nplt.show()\n\n### April 6rd, 2022 ###\n# Set your username and token here!\nusername = 'username'\ntoken = 'token'\n\n# Set the datastream and start/enddates\n\ndatastream = 'guchsrlM1.a1'\nstartdate = '2023-04-6'\nenddate = '2023-04-6'\n\n# Use ACT to easily download the data.  Watch for the data citation!  Show some support\n# for ARM's instrument experts and cite their data if you use it in a publication\nresult = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\nresult.sort()\n\nds = act.io.read_arm_netcdf(result)\nds.clean.cleanup()\n\n# compute log of backscatter \nds['beta_a_backscatter_log'] = np.log10(ds['beta_a_backscatter'])\nds['beta_a_backscatter_log'].attrs['units'] = f\"log10({ds['beta_a_backscatter'].attrs['units']})\"\nds = ds.where(ds.range <= 10000, drop=True)\n\nmask = ds['particulate_backscatter_signal_to_noise']>=3\n\n#beta_a_backscatter - column backscatter \nvariables = ['beta_a_backscatter_log', 'linear_depol', 'color_ratio']\n\n# watch out cloudy pixels\ndisplay = act.plotting.TimeSeriesDisplay(ds.where(mask),\n                                         subplot_shape=(3,), figsize=(12,16))\ndisplay.plot(variables[0], subplot_index=(0,))\ndisplay.set_yrng([0, 6000], subplot_index=(0,))\n\n# linear_depol indicates irregular aerosol \ndisplay.plot(variables[1], subplot_index=(1,), vmin = 0, vmax = 0.3)\ndisplay.set_yrng([0, 6000], subplot_index=(0,))\n\n# color_ratio an indicator of aerosol particle size. Large aerosol particles have larger color_ratios\ndisplay.plot(variables[2], subplot_index=(2,), vmin = 0, vmax = 1)\ndisplay.set_yrng([0, 6000], subplot_index=(0,))\n\nplt.show()\n\n### April 7th, 2022 ###\n# Set your username and token here!\nusername = 'username'\ntoken = 'token'\n\n# Set the datastream and start/enddates\n\ndatastream = 'guchsrlM1.a1'\nstartdate = '2023-04-7'\nenddate = '2023-04-7'\n\n# Use ACT to easily download the data.  Watch for the data citation!  Show some support\n# for ARM's instrument experts and cite their data if you use it in a publication\nresult = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\nresult.sort()\n\nds = act.io.read_arm_netcdf(result)\nds.clean.cleanup()\n\n# compute log of backscatter \nds['beta_a_backscatter_log'] = np.log10(ds['beta_a_backscatter'])\nds['beta_a_backscatter_log'].attrs['units'] = f\"log10({ds['beta_a_backscatter'].attrs['units']})\"\nds = ds.where(ds.range <= 10000, drop=True)\n\nmask = ds['particulate_backscatter_signal_to_noise']>=3\n\n#beta_a_backscatter - column backscatter \nvariables = ['beta_a_backscatter_log', 'linear_depol', 'color_ratio']\n\n# watch out cloudy pixels\ndisplay = act.plotting.TimeSeriesDisplay(ds.where(mask),\n                                         subplot_shape=(3,), figsize=(12,16))\ndisplay.plot(variables[0], subplot_index=(0,))\ndisplay.set_yrng([0, 6000], subplot_index=(0,))\n\n# linear_depol indicates irregular aerosol \ndisplay.plot(variables[1], subplot_index=(1,), vmin = 0, vmax = 0.3)\ndisplay.set_yrng([0, 6000], subplot_index=(0,))\n\n# color_ratio an indicator of aerosol particle size. Large aerosol particles have larger color_ratios\ndisplay.plot(variables[2], subplot_index=(2,), vmin = 0, vmax = 1)\ndisplay.set_yrng([0, 6000], subplot_index=(0,))\n\nplt.show()\n\n### April 8th, 2022 ###\n# Set your username and token here!\nusername = 'username'\ntoken = 'token'\n\n# Set the datastream and start/enddates\n\ndatastream = 'guchsrlM1.a1'\nstartdate = '2023-04-8'\nenddate = '2023-04-8'\n\n# Use ACT to easily download the data.  Watch for the data citation!  Show some support\n# for ARM's instrument experts and cite their data if you use it in a publication\nresult = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\nresult.sort()\n\nds = act.io.read_arm_netcdf(result)\nds.clean.cleanup()\n\n# compute log of backscatter \nds['beta_a_backscatter_log'] = np.log10(ds['beta_a_backscatter'])\nds['beta_a_backscatter_log'].attrs['units'] = f\"log10({ds['beta_a_backscatter'].attrs['units']})\"\nds = ds.where(ds.range <= 10000, drop=True)\n\nmask = ds['particulate_backscatter_signal_to_noise']>=3\n\n#beta_a_backscatter - column backscatter \nvariables = ['beta_a_backscatter_log', 'linear_depol', 'color_ratio']\n\n# watch out cloudy pixels\ndisplay = act.plotting.TimeSeriesDisplay(ds.where(mask),\n                                         subplot_shape=(3,), figsize=(12,16))\ndisplay.plot(variables[0], subplot_index=(0,))\ndisplay.set_yrng([0, 6000], subplot_index=(0,))\n\n# linear_depol indicates irregular aerosol \ndisplay.plot(variables[1], subplot_index=(1,), vmin = 0, vmax = 0.3)\ndisplay.set_yrng([0, 6000], subplot_index=(0,))\n\n# color_ratio an indicator of aerosol particle size. Large aerosol particles have larger color_ratios\ndisplay.plot(variables[2], subplot_index=(2,), vmin = 0, vmax = 1)\ndisplay.set_yrng([0, 6000], subplot_index=(0,))\n\nplt.show()","type":"content","url":"/notebooks/dust-analysis-with-lidar#dust-layer-observations","position":3},{"hierarchy":{"lvl1":"Surface albedo measurements"},"type":"lvl1","url":"/notebooks/sailradsnow","position":0},{"hierarchy":{"lvl1":"Surface albedo measurements"},"content":"","type":"content","url":"/notebooks/sailradsnow","position":1},{"hierarchy":{"lvl1":"Surface albedo measurements"},"type":"lvl1","url":"/notebooks/sailradsnow#surface-albedo-measurements","position":2},{"hierarchy":{"lvl1":"Surface albedo measurements"},"content":"\n\nimport act\nimport numpy as np\nimport xarray as xr\nimport matplotlib.pyplot as plt\n\n","type":"content","url":"/notebooks/sailradsnow#surface-albedo-measurements","position":3},{"hierarchy":{"lvl1":"Load surface radiation measurements"},"type":"lvl1","url":"/notebooks/sailradsnow#load-surface-radiation-measurements","position":4},{"hierarchy":{"lvl1":"Load surface radiation measurements"},"content":"\n\n# Set your username and token \nusername = 'yxie'\ntoken = '8bb157033dfd0a5'\n\n# Set the datastream and start/enddates\ndatastream = 'gucsebsM1.b1'\n\n# Event #1 at January 2, 2022\nstartdate1 = '2022-01-02'\nenddate1 = '2022-01-07'\n\n# Event #2 at January 25, 2022\nstartdate2 = '2022-01-25'\nenddate2 = '2022-01-30'\n\n# Event #3 at April 3, 2023\nstartdate3 = '2023-04-03'\nenddate3 = '2023-04-08'\n\n# We are looking at 5 days after the event\nnumdate = 6\n\n# Use ACT to easily download the data.  Watch for the data citation!  Show some support\n# for ARM's instrument experts and cite their data if you use it in a publication\nresult1 = act.discovery.download_arm_data(username, token, datastream, startdate1, enddate1)\nresult2 = act.discovery.download_arm_data(username, token, datastream, startdate2, enddate2)\nresult3 = act.discovery.download_arm_data(username, token, datastream, startdate3, enddate3)\n\n\n\n# Let's read in the data using ACT and check out the data\nds_rad1 = act.io.read_arm_netcdf(result1)\nds_rad2 = act.io.read_arm_netcdf(result2)\nds_rad3 = act.io.read_arm_netcdf(result3)\n\n# Quality Check the data\n# Remove the bad data\nds_rad1.clean.cleanup()\n#ds_rad = act.qc.arm.add_dqr_to_qc(ds_rad)\nds_rad1.qcfilter.datafilter(rm_assessments=['Bad'], del_qc_var=False)\n\nds_rad2.clean.cleanup()\nds_rad2.qcfilter.datafilter(rm_assessments=['Bad'], del_qc_var=False)\n\nds_rad3.clean.cleanup()\nds_rad3.qcfilter.datafilter(rm_assessments=['Bad'], del_qc_var=False)\n\n\n# check the data structure\nds_rad1\n\n# Visualize the SEBS albedo measurement\nplt.figure(figsize=(5.5,2), dpi=150)\nplt.plot(ds_rad1['time'], ds_rad1['albedo'], '.-')\nplt.xticks(fontsize=7)\nplt.yticks(np.arange(0,1.1,0.2),fontsize=8)\nplt.ylabel('albedo')\nplt.grid()\nplt.title('Control event')\nplt.show()\n\nplt.figure(figsize=(5.5,2), dpi=150)\nplt.plot(ds_rad2['time'], ds_rad2['albedo'], '.-')\nplt.xticks(fontsize=7)\nplt.yticks(np.arange(0,1.1,0.2),fontsize=8)\nplt.ylabel('albedo')\nplt.grid()\nplt.title('Black carbon event')\nplt.show()\n\nplt.figure(figsize=(5.5,2), dpi=150)\nplt.plot(ds_rad3['time'], ds_rad3['albedo'], '.-')\nplt.xticks(fontsize=7)\nplt.yticks(np.arange(0,1.1,0.2),fontsize=8)\nplt.ylabel('albedo')\nplt.grid()\nplt.title('Dust event')\nplt.show()\n\n\n","type":"content","url":"/notebooks/sailradsnow#load-surface-radiation-measurements","position":5},{"hierarchy":{"lvl1":"Compute the daily albedo"},"type":"lvl1","url":"/notebooks/sailradsnow#compute-the-daily-albedo","position":6},{"hierarchy":{"lvl1":"Compute the daily albedo"},"content":"\n\ndaily_swdn1 = ds_rad1[\"down_short_hemisp\"].groupby(\"time.day\").mean()\ndaily_swup1 = ds_rad1[\"up_short_hemisp\"].groupby(\"time.day\").mean()\ndaily_alb1 = daily_swup1 / daily_swdn1\n\ndaily_swdn2 = ds_rad2[\"down_short_hemisp\"].groupby(\"time.day\").mean()\ndaily_swup2 = ds_rad2[\"up_short_hemisp\"].groupby(\"time.day\").mean()\ndaily_alb2 = daily_swup2 / daily_swdn2\n\ndaily_swdn3 = ds_rad3[\"down_short_hemisp\"].groupby(\"time.day\").mean()\ndaily_swup3 = ds_rad3[\"up_short_hemisp\"].groupby(\"time.day\").mean()\ndaily_alb3 = daily_swup3 / daily_swdn3\n\n\nprint(\"Control event: \")\nprint(daily_alb1.values)\n\nprint(\"Black carbon event: \")\nprint(daily_alb2.values)\n\nprint(\"Dust event: \")\nprint(daily_alb3.values)\n\nplt.figure(figsize=(5,3), dpi=150)\n\nplt.plot(np.arange(1,7), daily_alb1, '.--', label='control event')\nplt.plot(np.arange(1,7), daily_alb2, 'o-', label='black carbon event')\nplt.plot(np.arange(1,7), daily_alb3, '^-', label='dust event')\n\nplt.xlabel('days')\nplt.ylabel('daily albedo')\nplt.legend(fontsize=8)\n\n\n","type":"content","url":"/notebooks/sailradsnow#compute-the-daily-albedo","position":7},{"hierarchy":{"lvl1":"Remove the diurnal cycle"},"type":"lvl1","url":"/notebooks/sailradsnow#remove-the-diurnal-cycle","position":8},{"hierarchy":{"lvl1":"Remove the diurnal cycle"},"content":"\n\n# calculate the mean by hour of each day\nds_rad[\"albedo\"].groupby(\"time.hour\").mean()\n\n# convert xarray to numpy array\nalbnew = ds_rad[\"albedo\"].to_numpy()\nalbnew_mean = np.nanmean(np.reshape(albnew, (48, numdate)), axis=1)\n\nalbnew_mean\n\n# Remove the diurnal cycle from the surface albedo\nalb = albnew - np.repeat(albnew_mean, numdate)\nalb.shape\n\nplt.plot(ds_rad['time'], alb, '.-')","type":"content","url":"/notebooks/sailradsnow#remove-the-diurnal-cycle","position":9},{"hierarchy":{"lvl1":"Explore WRF simulations of the surface albedo"},"type":"lvl1","url":"/notebooks/sailradwrf","position":0},{"hierarchy":{"lvl1":"Explore WRF simulations of the surface albedo"},"content":"","type":"content","url":"/notebooks/sailradwrf","position":1},{"hierarchy":{"lvl1":"Explore WRF simulations of the surface albedo"},"type":"lvl1","url":"/notebooks/sailradwrf#explore-wrf-simulations-of-the-surface-albedo","position":2},{"hierarchy":{"lvl1":"Explore WRF simulations of the surface albedo"},"content":"\n\n","type":"content","url":"/notebooks/sailradwrf#explore-wrf-simulations-of-the-surface-albedo","position":3},{"hierarchy":{"lvl1":"Explore WRF simulations of the surface albedo","lvl2":"Import modules"},"type":"lvl2","url":"/notebooks/sailradwrf#import-modules","position":4},{"hierarchy":{"lvl1":"Explore WRF simulations of the surface albedo","lvl2":"Import modules"},"content":"\n\nfrom datetime import timedelta\n\nimport cmweather\nimport xarray as xr\nimport xwrf\nimport glob\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nimport numpy as np\n\n","type":"content","url":"/notebooks/sailradwrf#import-modules","position":5},{"hierarchy":{"lvl1":"Explore WRF simulations of the surface albedo","lvl2":"Load WRF data in January 2022 and April 2023"},"type":"lvl2","url":"/notebooks/sailradwrf#load-wrf-data-in-january-2022-and-april-2023","position":6},{"hierarchy":{"lvl1":"Explore WRF simulations of the surface albedo","lvl2":"Load WRF data in January 2022 and April 2023"},"content":"\n\nfiles_202201 = sorted(glob.glob(\"/data/home/yxie/wrf_data/jan_2022/*\"))\nfiles_202304 = sorted(glob.glob(\"/data/home/yxie/wrf_data/apr_2023/*\"))\n\n# pickd dates for each event: onset and five days after that\nfiles_case1 = files_202201[1:7]    # daily\nfiles_case2 = files_202201[24:30]  # daily\nfiles_case3 = files_202304[8:32]   # every six hours\n\n# double check the dates\nfiles_case1\n\nfiles_case2\n\nfiles_case3\n\nds = xr.open_dataset(files_case1[0]).xwrf.postprocess()\n#ds = xr.open_dataset(files_case1[0])\nds\n\n","type":"content","url":"/notebooks/sailradwrf#load-wrf-data-in-january-2022-and-april-2023","position":7},{"hierarchy":{"lvl1":"Explore WRF simulations of the surface albedo","lvl2":"Visualize the snow albedo data"},"type":"lvl2","url":"/notebooks/sailradwrf#visualize-the-snow-albedo-data","position":8},{"hierarchy":{"lvl1":"Explore WRF simulations of the surface albedo","lvl2":"Visualize the snow albedo data"},"content":"\n\nds.ALBEDO\n\n","type":"content","url":"/notebooks/sailradwrf#visualize-the-snow-albedo-data","position":9},{"hierarchy":{"lvl1":"Explore WRF simulations of the surface albedo","lvl2":"Visualize snow albedo for the three cases"},"type":"lvl2","url":"/notebooks/sailradwrf#visualize-snow-albedo-for-the-three-cases","position":10},{"hierarchy":{"lvl1":"Explore WRF simulations of the surface albedo","lvl2":"Visualize snow albedo for the three cases"},"content":"Case 1: control event - Jan 2-8, 2022Case 2: black carbon event - Jan 25-31, 2022Case 3: dust event - Apr 3-9, 2023\n\ndscase1_ini = xr.open_dataset(files_case1[0]).xwrf.postprocess()\ndscase1_end = xr.open_dataset(files_case1[-1]).xwrf.postprocess()\n\ndscase2_ini = xr.open_dataset(files_case2[0]).xwrf.postprocess()\ndscase2_end = xr.open_dataset(files_case2[-1]).xwrf.postprocess()\n\n# choose 18 PM UTC, which corresponds to 12 PM in local time\ndscase3_ini = xr.open_dataset(files_case3[3]).xwrf.postprocess()   \ndscase3_end = xr.open_dataset(files_case3[-1]).xwrf.postprocess()\n\n","type":"content","url":"/notebooks/sailradwrf#visualize-snow-albedo-for-the-three-cases","position":11},{"hierarchy":{"lvl1":"Explore WRF simulations of the surface albedo","lvl2":"Time series of simulated snow albedo"},"type":"lvl2","url":"/notebooks/sailradwrf#time-series-of-simulated-snow-albedo","position":12},{"hierarchy":{"lvl1":"Explore WRF simulations of the surface albedo","lvl2":"Time series of simulated snow albedo"},"content":"\n\nCase 1: Control event\n\nfor itt in range(0, len(files_case1) ):\n    ds = xr.open_dataset(files_case1[itt]).xwrf.postprocess()\n    alb = ds.ALBEDO[:,124, 109].squeeze().values\n    time = ds.Time.squeeze().values\n\n    if itt == 0:\n        alb1 = alb\n        time1 = time\n    else:\n        alb1 = np.append(alb1, alb)\n        time1 = np.append(time1, time) \n    \n\nVisualize the time series\n\nplt.figure(figsize=(5.5,2),dpi=150)\nplt.plot(time1, alb1,'.-')\nplt.xticks(fontsize=7)\nplt.yticks(np.arange(0.7,0.9,0.05),fontsize=8)\nplt.ylabel('WRF albedo')\nplt.grid()\nplt.title('Control event')\nplt.show()\n\nCase 2: Black carbon event\n\nfor itt in range(0, len(files_case2) ):\n    ds = xr.open_dataset(files_case2[itt]).xwrf.postprocess()\n    alb = ds.ALBEDO[:,124,109].squeeze().values\n    time = ds.Time.squeeze().values\n\n    if itt == 0:\n        alb2 = alb\n        time2 = time\n    else:\n        alb2 = np.append(alb2, alb)\n        time2 = np.append(time2, time) \n    \n\nplt.figure(figsize=(5.5,2),dpi=150)\nplt.plot(time2, alb2,'.-')\nplt.xticks(fontsize=7)\nplt.yticks(np.arange(0.6,0.8,0.05),fontsize=8)\nplt.ylabel('WRF albedo')\nplt.grid()\nplt.title('Black carbon event')\nplt.show()\n\nCase 3: Dust event\n\nfor itt in range(0, len(files_case3) ):\n    ds = xr.open_dataset(files_case3[itt]).xwrf.postprocess()\n    alb = ds.ALBEDO[:,124,109].squeeze().values\n    time = ds.Time.squeeze().values\n\n    if itt == 0:\n        alb3 = alb\n        time3 = time\n    else:\n        alb3 = np.append(alb3, alb)\n        time3 = np.append(time3, time) \n    \n\nplt.figure(figsize=(5.5,2),dpi=150)\nplt.plot(time3, alb3,'.-')\nplt.xticks(fontsize=7)\nplt.yticks(np.arange(0.7,0.9,0.05),fontsize=8)\nplt.ylabel('WRF albedo')\nplt.grid()\nplt.title('Dust event')\nplt.show()\n\n","type":"content","url":"/notebooks/sailradwrf#time-series-of-simulated-snow-albedo","position":13},{"hierarchy":{"lvl1":"Explore WRF simulations of the surface albedo","lvl2":"Visualize albedo time series combination"},"type":"lvl2","url":"/notebooks/sailradwrf#visualize-albedo-time-series-combination","position":14},{"hierarchy":{"lvl1":"Explore WRF simulations of the surface albedo","lvl2":"Visualize albedo time series combination"},"content":"\n\nplt.figure(figsize=(5,2), dpi=150)\n\nplt.plot(np.arange(0, alb1.size)/(alb1.size-1)*5 + 1, alb1, '--', linewidth=1, label='control event')\nplt.plot(np.arange(0, alb2.size)/(alb2.size-1)*5 + 1, alb2, 'o-', markersize=2, label='black carbon event')\nplt.plot(np.arange(0, alb3.size)/(alb3.size-1)*5 + 1, alb3, '^-', markersize=3, label='dust event')\n\nplt.xlabel('days')\nplt.ylabel('WRF albedo')\nplt.legend(fontsize=8)\nplt.yticks(np.arange(0.65, 1.00, 0.05))\n\n# get the longitude and latitude coordinates\nxlong = dscase3_ini.XLONG.copy()\nxlat = dscase3_ini.XLAT.copy()\n\nxlong\nxlat\n\nxlong.shape\n\nxlat[124,109]\n\nxlong[124,109]\n\ndscase1_ini.ALBEDO.mean(dim=[\"Time\"])\n\nplt.figure(figsize=(16,4))\nalbini = dscase1_ini.ALBEDO[17,:,:]\nalbend = dscase1_end.ALBEDO[17,:,:]\n\nplt.suptitle('Control event')\n\nplt.subplot(1,3,1)\nplt.pcolormesh(xlong, xlat, albini.squeeze(), vmin=0.2, vmax=0.8)\nplt.xlabel('LON [degree_east]', fontsize=10)\nplt.ylabel('LAT [degree_north]', fontsize=10)\nplt.colorbar(label='Albedo')\nplt.title('(a) 2022-01-02')\n\nplt.subplot(1,3,2)\nplt.pcolormesh(xlong, xlat, albend.squeeze(), vmin=0.2, vmax=0.8)\nplt.xlabel('LON [degree_east]', fontsize=10)\nplt.ylabel('LAT [degree_north]', fontsize=10)\nplt.colorbar(label='Albedo')\nplt.title('(b) 2022-01-07')\n\nplt.subplot(1,3,3)\nplt.pcolormesh(xlong, xlat, albend.squeeze() - albini.squeeze(), cmap=cm.bwr, vmin=-0.2, vmax=0.2)\nplt.xlabel('LON [degree_east]', fontsize=10)\nplt.ylabel('LAT [degree_north]', fontsize=10)\nplt.colorbar(label='Albedo change')\nplt.title('(c) Difference')\n\nplt.figure(figsize=(16,4))\nalbini = dscase2_ini.ALBEDO[17,:,:]\nalbend = dscase2_end.ALBEDO[17,:,:]\n\nplt.suptitle('Black carbon event')\n\nplt.subplot(1,3,1)\nplt.pcolormesh(xlong, xlat, albini.squeeze(), vmin=0.2, vmax=0.8)\nplt.xlabel('LON [degree_east]', fontsize=10)\nplt.ylabel('LAT [degree_north]', fontsize=10)\nplt.colorbar(label='Albedo')\nplt.title('(a) 2022-01-25')\n\nplt.subplot(1,3,2)\nplt.pcolormesh(xlong, xlat, albend.squeeze(), vmin=0.2, vmax=0.8)\nplt.xlabel('LON [degree_east]', fontsize=10)\nplt.ylabel('LAT [degree_north]', fontsize=10)\nplt.colorbar(label='Albedo')\nplt.title('(b) 2023-01-30')\n\nplt.subplot(1,3,3)\nplt.pcolormesh(xlong, xlat, albend.squeeze() - albini.squeeze(), cmap=cm.bwr, vmin=-0.2, vmax=0.2)\nplt.xlabel('LON [degree_east]', fontsize=10)\nplt.ylabel('LAT [degree_north]', fontsize=10)\nplt.colorbar(label='Albedo change')\nplt.title('(c) Difference')\n\nplt.figure(figsize=(16,4))\n\nplt.suptitle('Dust event')\n\nplt.subplot(1,3,1)\nplt.pcolormesh(xlong, xlat, dscase3_ini.ALBEDO.squeeze(), vmin=0.2, vmax=0.8)\nplt.xlabel('LON [degree_east]', fontsize=10)\nplt.ylabel('LAT [degree_north]', fontsize=10)\nplt.colorbar(label='Albedo')\nplt.title('(a) 2023-04-03')\n\nplt.subplot(1,3,2)\nplt.pcolormesh(xlong, xlat, dscase3_end.ALBEDO.squeeze(), vmin=0.2, vmax=0.8)\nplt.xlabel('LON [degree_east]', fontsize=10)\nplt.ylabel('LAT [degree_north]', fontsize=10)\nplt.colorbar(label='Albedo')\nplt.title('(b) 2023-04-09')\n\nplt.subplot(1,3,3)\nplt.pcolormesh(xlong, xlat, dscase3_end.ALBEDO.squeeze() - dscase3_ini.ALBEDO.squeeze(), cmap=cm.bwr, vmin=-0.2, vmax=0.2)\nplt.xlabel('LON [degree_east]', fontsize=10)\nplt.ylabel('LAT [degree_north]', fontsize=10)\nplt.colorbar(label='Albedo change')\nplt.title('(c) Difference')","type":"content","url":"/notebooks/sailradwrf#visualize-albedo-time-series-combination","position":15},{"hierarchy":{"lvl1":"Surface temperature comparison"},"type":"lvl1","url":"/notebooks/snowdepthanalysis","position":0},{"hierarchy":{"lvl1":"Surface temperature comparison"},"content":"import act\nimport numpy as np\nimport xarray as xr\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import timedelta\nimport xwrf\nimport cmweather\nimport glob\nfrom bokeh.models.formatters import DatetimeTickFormatter\nimport hvplot.xarray\nimport holoviews as hv\nhv.extension(\"bokeh\")\n\n# Set your username and token here!\nusername = '---------'\ntoken = '##########'\n\n# Set the datastream and start/enddates\ndatastream_snow = 'gucmetM1.b1' # snow depth, also precipitation rate\n# datastream_metprep = 'gucmetM1.b1' # surface temperature+precipitation\nstartdate1 = '2022-01-02'\nenddate1 = '2022-01-07'\nstartdate2 = '2022-01-25'\nenddate2 = '2022-01-30'\nstartdate3 = '2023-04-03'\nenddate3 = '2023-04-08'\n\n# wrf: snow depth()\n# SNOWNC: ACCUMULATED TOTAL GRID SCALE SNOW AND ICE\n# SNOWC: FLAG INDICATING SNOW COVERAGE (1 FOR SNOW COVER)\n\n# Use ACT to easily download the data.  Watch for the data citation!  Show some support\n# for ARM's instrument experts and cite their data if you use it in a publication\ndatasnow1 = act.discovery.download_arm_data(username, token, datastream_snow, startdate1, enddate1)\ndatasnow2 = act.discovery.download_arm_data(username, token, datastream_snow, startdate2, enddate2)\ndatasnow3 = act.discovery.download_arm_data(username, token, datastream_snow, startdate3, enddate3)\n# datamet = act.discovery.download_arm_data(username, token, datastream_metprep, startdate, enddate)\n\n# Let's read in the data using ACT and check out the data\nds_snow1 = act.io.read_arm_netcdf(datasnow1) # 1-min\nds_snow2 = act.io.read_arm_netcdf(datasnow2) # 1-min\nds_snow3 = act.io.read_arm_netcdf(datasnow3) # 1-min\n\nds_snow1\n\nds_snow1[\"temp_mean\"] = ds_snow1[\"temp_mean\"] + 273.15\nds_snow2[\"temp_mean\"] = ds_snow2[\"temp_mean\"] + 273.15\nds_snow3[\"temp_mean\"] = ds_snow3[\"temp_mean\"] + 273.15\n\nds_snow1[\"temp_mean\"]\n\nvariable_snow = \"tbrg_precip_total_corr\"\nvariable_temp = \"temp_mean\"\n\n# Jan 2-7 2022\n# Create a plotting display object with 2 plots\ndisplay = act.plotting.TimeSeriesDisplay(ds_snow1,subplot_shape=(2,), figsize=(15,10))\n\n# Plot up the variable in the first plot - Surface precipitation corrected (tbrg_precip_total_corr)\ndisplay.plot(variable_snow, subplot_index=(0,),day_night_background=True,\n             set_title=\"Control case: Total precipitation\")\n# display.day_night_background(subplot_index=(0,))\n\n# Plot up the variable in the second plot - Temperature: temp_mean\ndisplay.plot(variable_temp, subplot_index=(1,),day_night_background=True,\n             set_title=\"Control case: Surface Temperature\")\n# display.day_night_background(subplot_index=(1,))\nplt.ylabel('(K)')\nplt.show() \n\n# Jan 25-30 2022\n# Create a plotting display object with 2 plots\ndisplay = act.plotting.TimeSeriesDisplay(ds_snow2,subplot_shape=(2,), figsize=(15,10))\n\n# Plot up the variable in the first plot - Surface precipitation corrected (tbrg_precip_total_corr)\ndisplay.plot(variable_snow, subplot_index=(0,),day_night_background=True,\n             set_title=\"Black carbon case: Total precipitation\")\n# display.day_night_background(subplot_index=(0,))\n\n# Plot up the variable in the second plot - Temperature: temp_mean\ndisplay.plot(variable_temp, subplot_index=(1,),day_night_background=True,\n             set_title=\"Black carbon case: Surface Temperature\")\n# display.day_night_background(subplot_index=(1,))\n\nplt.show() \n\n# Apr 3-8 2022\n# Create a plotting display object with 2 plots\ndisplay = act.plotting.TimeSeriesDisplay(ds_snow3,subplot_shape=(2,), figsize=(15,10))\n\n# Plot up the variable in the first plot - Surface precipitation corrected (tbrg_precip_total_corr)\ndisplay.plot(variable_snow, subplot_index=(0,),day_night_background=True,\n             set_title=\"Dust case: Total precipitation\")\n# display.day_night_background(subplot_index=(0,))\n\n# Plot up the variable in the second plot - Temperature: temp_mean\ndisplay.plot(variable_temp, subplot_index=(1,),day_night_background=True,\n             set_title=\"Dust case: Surface Temperature\")\n# display.day_night_background(subplot_index=(1,))\n\nplt.show() \n\n## WRF\nfiles_ctrl=sorted(glob.glob(\"/data/home/mqzhang/sail-cookbook/notebooks/downloaded_files/control/*\"))\nfiles_bc=sorted(glob.glob(\"/data/home/mqzhang/sail-cookbook/notebooks/downloaded_files/bc/*\"))\nfiles_dust=sorted(glob.glob(\"/data/home/mqzhang/sail-cookbook/notebooks/downloaded_files/dust/*\"))\n\nds_ctrl = xr.open_mfdataset(files_ctrl,concat_dim=\"Time\",combine=\"nested\").xwrf.postprocess().squeeze()\nds_ctrl\n\nformatter = DatetimeTickFormatter(hours=\"%d %b %Y \\n %H:%M UTC\")\nds_ctrl[\"T2\"].mean(dim=['x', 'y']).hvplot(xformatter=formatter)\n\nds_bc = xr.open_mfdataset(files_bc,concat_dim=\"Time\",combine=\"nested\").xwrf.postprocess().squeeze()\nds_bc\n\nds_bc[\"T2\"].mean(dim=['x', 'y']).hvplot(xformatter=formatter)\n\nds_dust = xr.open_mfdataset(files_dust,concat_dim=\"Time\",combine=\"nested\").xwrf.postprocess().squeeze()\nds_dust\n\nds_dust[\"T2\"].load()\nds_dust[\"T2\"].mean(dim=['x', 'y']).hvplot(x=\"Time\")","type":"content","url":"/notebooks/snowdepthanalysis","position":1},{"hierarchy":{"lvl1":"Plot downward longwave (LW) radiation at surface for WRF Simulations"},"type":"lvl1","url":"/notebooks/wrf-plot-longwave-rad","position":0},{"hierarchy":{"lvl1":"Plot downward longwave (LW) radiation at surface for WRF Simulations"},"content":"WRF simulations serve as comparison to observations. Here the downward longwave radiation for the high black carbon loading event is considered. The results from the high dust event was difficult to interpret and is omitted.\n\nimport xarray as xr\nimport cartopy\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\n%matplotlib inline\n\n# Plot downward LW radiation at surface\n# January 26th had no clouds so this day serves as comparison \ndataset_25 = xr.open_mfdataset('wrf_data/jan_2022/wrfhourly_d03_2022-01-25.nc')\ndataset_26 = xr.open_mfdataset('wrf_data/jan_2022/wrfhourly_d03_2022-01-26.nc')\ndataset_02 = xr.open_mfdataset('wrf_data/jan_2022/wrfhourly_d03_2022-01-02.nc')\nmean_dataset_diff = dataset_25.mean(dim=\"Time\") - dataset_02.mean(dim=\"Time\")\n\nfig = plt.figure(figsize = (12,3),constrained_layout=True)\n\ngs = GridSpec(1, 3, figure=fig)\nax1 = fig.add_subplot(gs[0, 0])\ndataset_25.mean(dim=\"Time\").GLW.plot(x='south_north',y='west_east',cbar_kwargs={'label': r\"Downward LW at Surf.\"})\nax1.set_title('Jan 25, 2022')\nax2 = fig.add_subplot(gs[0, 1])\ndataset_26.mean(dim=\"Time\").GLW.plot(x='south_north',y='west_east',cbar_kwargs={'label': r\"Downward LW at Surf.\"})\nax2.set_title('Jan 26, 2022')\nax3 = fig.add_subplot(gs[0, 2])\nmean_dataset_diff.GLW.plot(x='south_north',y='west_east',cbar_kwargs={'label': r\"Downward LW at Surf.\"})\nax3.set_title('Jan 25th - Control')\n\n# plot time series of downward LW radiation for Jan 25 \ndataset_25 = xr.open_mfdataset('wrf_data/jan_2022/wrfhourly_d03_2022-01-25.nc')\ntime_series = dataset_25.mean(dim=\"south_north\")\ntime_series = time_series.mean(dim=\"west_east\")\nfig = plt.figure(figsize = (12,4),constrained_layout=True)\ntime_series.GLW.plot()\nplt.grid()\nplt.title('time series of LWR')\nplt.ylabel('Downward LWR at surface / W$m^{-2}$')\n\n# plot time series of downward LW radiation for Jan 26\ndataset_26 = xr.open_mfdataset('wrf_data/jan_2022/wrfhourly_d03_2022-01-26.nc')\ntime_series = dataset_26.mean(dim=\"south_north\")\ntime_series = time_series.mean(dim=\"west_east\")\nfig = plt.figure(figsize = (12,4),constrained_layout=True)\ntime_series.GLW.plot()\nplt.grid()\nplt.title('time series of LWR')\nplt.ylabel('Downward LWR at surface / W$m^{-2}$')","type":"content","url":"/notebooks/wrf-plot-longwave-rad","position":1}]}